{
    "6613": {
        "title": "《从放弃C语言到使用C++刷算法的简明教程》by 柳婼",
        "time": "2018-09-25T00:42:26+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong><img class=\"alignnone wp-image-6648\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/QQ20180922-092554@2x.png\" alt=\"\" width=\"299\" height=\"107\">你们要不要考虑也幸福一下下～<br></strong></span></p><p><span style=\"color: #000000;\"><strong>有些学弟学妹和我说我的代码写的很简洁优美，但是不太熟悉C++语法，导致看我代码的时候有些编程语法方面的障碍…<span style=\"color: #ff0000;\">所以我写了一篇快速从C语言转向C++刷算法的简明教程…</span>当然也是为了宣传C++这么好用的东东…学过C语言的就能看懂…</strong></span></p><p><strong>【题目叫《从放弃C语言到使用C++刷算法的简明教程》by 柳婼】</strong></p><p><span style=\"color: #000000;\"><strong>以下是目录截图…写这份教程花了我挺多时间的…主要是想帮助一些可爱的学弟学妹解决不想看《C++ primer plus》这种900多页的书又想要用C++刷算法或者想看懂我博客中代码的C++语法的难题…<span style=\"color: #3366ff;\">可爱的你们花一小时看完这份教程就能愉快放弃C语言使用C++刷算法啦…（已经花了大半个月学完的小粉丝不要打我嘤嘤嘤～）</span><span style=\"color: #ff0000;\">还和离线版订阅获取的方式一样…打赏15元并备注邮箱号即可…打赏二维码在最下面…</span>24小时内发送到邮箱…（一般一两个小时就收到了～）时间仓促，后期还会对这份文档的内容进行扩充完善…到时候有版本更新还会继续发送到邮箱中～感谢支持与信任～</strong></span></p><p><img class=\"alignnone size-full wp-image-6629\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/QQ20180920-000455@2x.png\" alt=\"\" width=\"1668\" height=\"1754\"></p><p><img class=\"wp-image-6615 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/5DC1E1A04CFD1FB48939FBAAC56A4E73.jpg\" alt=\"\" width=\"245\" height=\"245\"></p><p><img class=\"alignnone size-full wp-image-6608\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/QQ20180917-233833@2x.png\" alt=\"\" width=\"2038\" height=\"1014\"></p>"
    },
    "6661": {
        "title": "IT程序员对于一些单词的正确读音 – xxx单词怎么读系列",
        "time": "2018-09-25T00:38:53+00:00",
        "content": "<p>YouTube  [ˈjuːˌtjuːb]</p><p>Adobe [əˈdəʊbi]</p><p>Chrome [krəʊm]</p><p>ASCII [‘æski]</p><p>amazon [‘æməzən]</p><p>WIFI [ˈwʌɪfʌɪ]</p><p>integer [ˈɪntɪdʒə]</p><p>cache [kæʃ]</p><p>access [‘ækses]</p><p>Apache [əˈpætʃiː]</p><p>archive [‘ɑːkaɪv]</p><p>deque [‘dek]</p><p>array [ ə’rei ]</p><p>safari [sə’fɑːrɪ]</p><p>AJAX [ˈeɪdʒæks]</p><p>jpg(JPEG) [‘dʒeɪpeɡ]</p><p>Retina [ ‘retnə ]</p><p>resolved [rɪ’zɒlvd]</p><p>resort [rɪˈzɔ:t]</p><p>APP [æp]</p><p>vue [v’ju:]</p><p>scheme [skiːm]</p><p>Ubuntu [uˈbuntuː]</p><p>LaTeX [ˈleɪtɛx]（也可以读作[ˈleɪtɛk] [ˈlɑːtɛx] [ˈlɑːtɛk]）</p><p>suite [swiːt]</p><p>Debian [ˈdɛbiən]</p><p>Skype [skaɪp]</p><p>avatar [ˌævə’tɑr]</p><p>C# (C Sharp)</p><p>Mac OS X (Mac OS ten)</p><p>Qt (cute)</p><p>FIFO ( [‘faifəu]，或者读first in， first out）</p><p>P2P (p to p)</p><p>.NET (dot net)</p><p>sudo ( [‘suːduː] )</p><p>Xcode ( [eks] code )</p>"
    },
    "6581": {
        "title": "一只程序媛的日常(๑• . •๑)",
        "time": "2018-09-13T20:03:08+00:00",
        "content": "<p style=\"text-align: center;\"><span style=\"color: #999999; font-size: 12px;\">·日·常·<br>偶尔喜欢看书～(๑• . •๑)<br>偶尔喜欢刷算法～(๑• . •๑)<br>偶尔喜欢参加竞赛～(๑• . •๑)<br>偶尔喜欢做开发～(๑• . •๑)<br>偶尔喜欢折腾～(๑• . •๑)<br>总的来说是个很热爱生活的程序媛～(๑• . •๑)<br></span></p><p><span style=\"color: #ff99cc;\"><strong><span style=\"color: #99cc00;\"><img class=\"wp-image-6576 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/AFF90E17347F8890CD6A3ACF301D344C.jpg\" alt=\"\" width=\"450\" height=\"563\"></span></strong></span><span style=\"color: #ff99cc;\"><strong><span style=\"color: #99cc00;\"><img class=\"wp-image-6577 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/BE272677E7035DCDF7D08DBEFE96BD58.jpg\" alt=\"\" width=\"469\" height=\"441\"><img class=\"wp-image-6588 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/8C19042066DA30FAC854FED83063673B.jpg\" alt=\"\" width=\"480\" height=\"451\"></span></strong></span><img class=\"wp-image-6590 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/IMG_061720180913-204553.jpg\" alt=\"\" width=\"490\" height=\"733\"><img class=\"alignnone  wp-image-6593 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/8989B04C72DABC8917ECB1133D86BD6C.jpg\" alt=\"\" width=\"493\" height=\"542\"></p><p><img class=\"wp-image-6582 aligncenter\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/519153AC28A076DE79FB7C9F3977A373.jpg\" alt=\"\" width=\"356\" height=\"277\"></p><p> </p>"
    },
    "6572": {
        "title": "[note] 知乎course – 上班族的极简健康课",
        "time": "2018-09-13T16:34:09+00:00",
        "content": "<p><span id=\"more-6572\"></span></p>"
    },
    "5703": {
        "title": "[订阅获取] blog离线版",
        "time": "2018-09-13T01:36:45+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>PS：9月8日PAT考试的最新题目已更新到离线版并发送到各位订阅者的邮箱中，顺带更新了一些题目的更优解，请查收～</strong></span></p><p>感谢各位的支持，<span style=\"color: #ff0000;\">今年的blog服务器已经续费啦</span>（这次自己才补了几十块钱，去年我补了1500，心酸~~~~(&gt;_&lt;)~~~~ ），现在我又可以愉快地写下一年的博客啦（又要为下一年的年费发愁啦。。。）～</p><p>最近有很多人问我，<span style=\"color: #ff0000;\">开学了图书馆教室自习室没网络or不能用电脑的时候看不了博客怎么办</span>，还有的人直接把我的博客手动打印了下来上课带着看…（辛苦这些同学了…然而我博客几乎每周都在更新修复一些小错误、更新一些更为简洁易懂的代码emmmm…）为了帮助那些有blog离线版需要的人，<span style=\"color: #ff0000;\"><span style=\"color: #000000;\">所以</span>我请了几位好友一起帮忙整理了blog的离线版（PDF格式）</span>，花费了我和几位好友的很多课余时间，包括寻找github、csdn、blog中的最新代码、为最新代码添加分析题解、添加PAT题目中的图片、修改了很多错别字等等…总之花费了很多精力啦～<span style=\"color: #3366ff;\"><strong>（甲级297页，乙级122页，天梯赛137页，LeetCode235页）</strong></span></p><p><span style=\"color: #ff0000;\">为了下一年交年费的时候不再这么窘迫…</span>所以花费了很多心思整理，还包括后期的离线版本永久免费更新…希望能以此获得一些blog年费资助～</p><p><strong><span style=\"color: #ff0000;\">订阅方式：</span><span style=\"color: #3366ff;\">打赏固定金额并备注你的常用邮箱（后期的所有大版本更新都会发送到你备注的邮箱中），订阅后24小时内发送到邮箱～</span></strong></p><p><span style=\"color: #ff0000;\">订阅名额有限，</span>我认为加上一年的打赏基本上可以凑够博客年费就会停止接收新的订阅，但后期PAT各种题目的bug修复、代码更新和题库中新的PAT题目我都会继续将离线版更新下去并发送到订阅者的邮箱里～</p><p>离线订阅的题目大意和分析<span style=\"color: #ff0000;\">调成了适合阅读或打印的黑白色<span style=\"color: #000000;\">的</span></span>PDF版本，几乎每道题都有题目原文、题目大意、分析和代码，后期还会继续扩充分析的完善性和简洁性～</p><p><span style=\"color: #ff9900;\"><strong>离线版的内容截图如下：</strong></span></p><p><img class=\"alignnone size-full wp-image-6128\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/095C2D53-6CD7-4449-B235-F9B927F76DDB.jpg\" alt=\"\" width=\"1052\" height=\"1000\"></p><p><img class=\"alignnone size-full wp-image-6608\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/QQ20180917-233833@2x.png\" alt=\"\" width=\"2038\" height=\"1014\"></p>"
    },
    "6597": {
        "title": "iPad + Magic Keyboard蓝牙键盘的快捷键～",
        "time": "2018-09-12T22:04:07+00:00",
        "content": "<p class=\"p1\">在<span class=\"s1\">App</span>页面长按<span class=\"s1\">command</span>可以看到所有快捷键的提示～下面是一些常用的～</p><p class=\"p3\"><span class=\"s2\">切换输入法：</span>Control + <span class=\"s2\">空格</span></p><p class=\"p1\">切换到上一个应用：<span class=\"s1\">Command + Tab</span>（按住可看到打开的所有应用）</p><p class=\"p1\">中英文输入法切换键：<span class=\"s1\">Caps lock</span></p><p class=\"p3\"><span class=\"s2\">回到主屏幕：</span>command + H</p><p class=\"p3\"><span class=\"s2\">唤出底部程序坞：</span>option + command + D</p><p class=\"p3\">Spotlight<span class=\"s2\">搜索：</span>Command + <span class=\"s2\">空格</span></p><p>还有一些app里面带的快捷键也很好用，长按command就能看见啦～</p>"
    },
    "6565": {
        "title": "如何在Dev-Cpp中使用C++11中的函数：stoi、to_string、unordered_map、unordered_set、auto",
        "time": "2018-09-12T21:55:39+00:00",
        "content": "<p>如果想要在Dev-Cpp里面使用C++11特性的函数，比如刷算法中常用的stoi、to_string、unordered_map、unordered_set、auto这些，需要在设置里面让dev支持c++11～需要这样做～</p><p>在工具-编译选项-编译器-编译时加入这个命令“-std=c++11”：</p><p><img class=\"alignnone size-full wp-image-6566\" src=\"https://cdn1.liuchuo.net/wp-content/uploads/2018/09/4D9497FC-EF96-4941-8330-9AD0EA3F98A4.png\" alt=\"\" width=\"727\" height=\"808\"></p><p>然后就可以愉快的用这些好用到飞起的C++11函数啦啦啦啦啦啦～～～</p>"
    },
    "6562": {
        "title": "[C++] STL库函数之字符串string::npos的介绍，以及string中的find函数～",
        "time": "2018-09-12T20:40:50+00:00",
        "content": "<p>npos经常和find一起用～它们两个都在头文件&lt;string&gt;里面～先看用法：</p><p>简单点说就是，在字符串s中查找“b”字符（当然也可以查找一个字符串如“ab”），find函数如果找到了，就会返回第一次出现这个字符的位置，如果没找到怎么办呢，它会返回npos这个位置，npos本质上其实是一个常数，一般来说值是-1，所以s.find(“b”) != string::npos表示找到了“b”这个字符～如果相等就是没找到的意思啦～</p><p>我们可以从C++库函数的官方文档(www.cplusplus.com)中找到对这两个函数的解释～</p><p>以及关于为什么npos的值是-1的解释：</p>"
    },
    "6494": {
        "title": "PAT 1148 Werewolf – Simple Version – 甲级",
        "time": "2018-09-09T00:24:09+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>Werewolf（狼人杀） is a game in which the players are partitioned into two parties: the werewolves and the human beings. Suppose that in a game,</strong></span></p><p><span style=\"color: #33cccc;\"><strong>player #1 said: “Player #2 is a werewolf.”;</strong></span><br><span style=\"color: #33cccc;\"><strong>player #2 said: “Player #3 is a human.”;</strong></span><br><span style=\"color: #33cccc;\"><strong>player #3 said: “Player #4 is a werewolf.”;</strong></span><br><span style=\"color: #33cccc;\"><strong>player #4 said: “Player #5 is a human.”; and</strong></span><br><span style=\"color: #33cccc;\"><strong>player #5 said: “Player #4 is a human.”.</strong></span><br><span style=\"color: #33cccc;\"><strong>Given that there were 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liers. Can you point out the werewolves?</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Now you are asked to solve a harder version of this problem: given that there were N players, with 2 werewolves among them, at least one but not all the werewolves were lying, and there were exactly 2 liers. You are supposed to point out the werewolves.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Input Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>Each input file contains one test case. For each case, the first line gives a positive integer N (5≤N≤100). Then N lines follow and the i-th line gives the statement of the i-th player (1≤i≤N), which is represented by the index of the player with a positive sign for a human and a negative sign for a werewolf.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Output Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>If a solution exists, print in a line in ascending order the indices of the two werewolves. The numbers must be separated by exactly one space with no extra spaces at the beginning or the end of the line. If there are more than one solution, you must output the smallest solution sequence — that is, for two sequences A=a[1],…,a[M] and B=b[1],…,b[M], if there exists 0≤k[k+1]&lt;b[k+1], then A is said to be smaller than B. In case there is no solution, simply print No Solution.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Sample Input 1:</strong></span><br><span style=\"color: #33cccc;\"><strong>5</strong></span><br><span style=\"color: #33cccc;\"><strong>-2</strong></span><br><span style=\"color: #33cccc;\"><strong>+3</strong></span><br><span style=\"color: #33cccc;\"><strong>-4</strong></span><br><span style=\"color: #33cccc;\"><strong>+5</strong></span><br><span style=\"color: #33cccc;\"><strong>+4</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output 1:</strong></span><br><span style=\"color: #33cccc;\"><strong>1 4</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Input 2:</strong></span><br><span style=\"color: #33cccc;\"><strong>6</strong></span><br><span style=\"color: #33cccc;\"><strong>+6</strong></span><br><span style=\"color: #33cccc;\"><strong>+3</strong></span><br><span style=\"color: #33cccc;\"><strong>+1</strong></span><br><span style=\"color: #33cccc;\"><strong>-5</strong></span><br><span style=\"color: #33cccc;\"><strong>-2</strong></span><br><span style=\"color: #33cccc;\"><strong>+4</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output 2 (the solution is not unique):</strong></span><br><span style=\"color: #33cccc;\"><strong>1 5</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Input 3:</strong></span><br><span style=\"color: #33cccc;\"><strong>5</strong></span><br><span style=\"color: #33cccc;\"><strong>-2</strong></span><br><span style=\"color: #33cccc;\"><strong>-3</strong></span><br><span style=\"color: #33cccc;\"><strong>-4</strong></span><br><span style=\"color: #33cccc;\"><strong>-5</strong></span><br><span style=\"color: #33cccc;\"><strong>-1</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output 3:</strong></span><br><span style=\"color: #33cccc;\"><strong>No Solution</strong></span></p><p><strong><span style=\"color: #99cc00;\">题目大意：已知 N 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家，如果有解，在一行中按递增顺序输出 2 个狼人的编号；如果解不唯一，则输出最小序列解；若无解则输出 No Solution～</span></strong></p><p><strong><span style=\"color: #ff9900;\">分析：每个人说的数字保存在v数组中，i从1～n、j从i+1～n遍历，分别假设i和j是狼人，a数组表示该人是狼人还是好人，等于1表示是好人，等于-1表示是狼人。k从1～n分别判断k所说的话是真是假，k说的话和真实情况不同（即v[k] * a[abs(v[k])] &lt; 0）则表示k在说谎，则将k放在lie数组中；遍历完成后判断lie数组，如果说谎人数等于2并且这两个说谎的人一个是好人一个是狼人（即a[lie[0]] + a[lie[1]] == 0）表示满足题意，此时输出i和j并return，否则最后的时候输出No Solution～</span></strong></p><p></p>"
    },
    "6496": {
        "title": "PAT 1151 LCA in a Binary Tree（30 分）- 甲级",
        "time": "2018-09-09T00:23:44+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Given any two nodes in a binary tree, you are supposed to find their LCA.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Input Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the binary tree, respectively. In each of the following two lines, N distinct integers are given as the inorder and preorder traversal sequences of the binary tree, respectively. It is guaranteed that the binary tree can be uniquely determined by the input sequences. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of int.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Output Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>For each given pair of U and V, print in a line LCA of U and V is A. if the LCA is found and A is the key. But if A is one of U and V, print X is an ancestor of Y. where X is A and Y is the other node. If U or V is not found in the binary tree, print in a line ERROR: U is not found. or ERROR: V is not found. or ERROR: U and V are not found..</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Sample Input:</strong></span><br><span style=\"color: #33cccc;\"><strong>6 8</strong></span><br><span style=\"color: #33cccc;\"><strong>7 2 3 4 6 5 1 8</strong></span><br><span style=\"color: #33cccc;\"><strong>5 3 7 2 6 4 8 1</strong></span><br><span style=\"color: #33cccc;\"><strong>2 6</strong></span><br><span style=\"color: #33cccc;\"><strong>8 1</strong></span><br><span style=\"color: #33cccc;\"><strong>7 9</strong></span><br><span style=\"color: #33cccc;\"><strong>12 -3</strong></span><br><span style=\"color: #33cccc;\"><strong>0 8</strong></span><br><span style=\"color: #33cccc;\"><strong>99 99</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output:</strong></span><br><span style=\"color: #33cccc;\"><strong>LCA of 2 and 6 is 3.</strong></span><br><span style=\"color: #33cccc;\"><strong>8 is an ancestor of 1.</strong></span><br><span style=\"color: #33cccc;\"><strong>ERROR: 9 is not found.</strong></span><br><span style=\"color: #33cccc;\"><strong>ERROR: 12 and -3 are not found.</strong></span><br><span style=\"color: #33cccc;\"><strong>ERROR: 0 is not found.</strong></span><br><span style=\"color: #33cccc;\"><strong>ERROR: 99 and 99 are not found.</strong></span></p><p><span style=\"color: #99cc00;\"><strong>题目大意：给出中序序列和先序序列，再给出两个点，求这两个点的最近公共祖先～</strong></span></p><p><strong><span style=\"color: #ff9900;\">分析：不用建树～已知某个树的根结点，若a和b在根结点的左边，则a和b的最近公共祖先在当前子树根结点的左子树寻找，如果a和b在当前子树根结点的两边，在当前子树的根结点就是a和b的最近公共祖先，如果a和b在当前子树根结点的右边，则a和b的最近公共祖先就在当前子树的右子树寻找。中序加先序可以唯一确定一棵树，在不构建树的情况下，在每一层的递归中，可以得到树的根结点，在此时并入lca算法可以确定两个结点的公共祖先～</span></strong></p><p> </p>"
    },
    "6521": {
        "title": "PAT 1088 三人行（20 分）- 乙级",
        "time": "2018-09-09T00:01:05+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</strong></span></p><p><span style=\"color: #33cccc;\"><strong>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 Cong；平等则输出 Ping；比你弱则输出 Gai。其间以 1 个空格分隔，行首尾不得有多余空格。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 No Solution。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入样例 1：</strong></span><br><span style=\"color: #33cccc;\"><strong>48 3 7</strong></span><br><span style=\"color: #33cccc;\"><strong>输出样例 1：</strong></span><br><span style=\"color: #33cccc;\"><strong>48 Ping Cong Gai</strong></span><br><span style=\"color: #33cccc;\"><strong>输入样例 2：</strong></span><br><span style=\"color: #33cccc;\"><strong>48 11 6</strong></span><br><span style=\"color: #33cccc;\"><strong>输出样例 2：</strong></span><br><span style=\"color: #33cccc;\"><strong>No Solution</strong></span></p><p><strong><span style=\"color: #ff9900;\">分析：丙不一定是int值，可能是4.5这样的数字～所以要用double存储丙～i、j、k分别代表甲乙丙～i从99遍历到10找到符合题意的那个数字即可～</span></strong></p><p></p>"
    },
    "6498": {
        "title": "PAT 1150 Travelling Salesman Problem（25 分）- 甲级",
        "time": "2018-09-09T00:00:39+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?” It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. (Quoted from “https://en.wikipedia.org/wiki/Travelling_salesman_problem”.)</strong></span></p><p><span style=\"color: #33cccc;\"><strong>In this problem, you are supposed to find, from a given list of cycles, the one that is the closest to the solution of a travelling salesman problem.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Input Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt;N≤200), the number of cities, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format City1 City2 Dist, where the cities are numbered from 1 to N and the distance Dist is positive and is no more than 100. The next line gives a positive integer K which is the number of paths, followed by K lines of paths, each in the format:</strong></span></p><p><span style=\"color: #33cccc;\"><strong>n C1 C2 ……Cn​​</strong></span></p><p><span style=\"color: #33cccc;\"><strong>where n is the number of cities in the list, and C</strong></span><span style=\"color: #33cccc;\"><strong>​i</strong></span><span style=\"color: #33cccc;\"><strong>‘s are the cities on a path.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Output Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>For each path, print in a line Path X: TotalDist (Description) where X is the index (starting from 1) of that path, TotalDist its total distance (if this distance does not exist, output NA instead), and Description is one of the following:</strong></span></p><p><span style=\"color: #33cccc;\"><strong>TS simple cycle if it is a simple cycle that visits every city;</strong></span><br><span style=\"color: #33cccc;\"><strong>TS cycle if it is a cycle that visits every city, but not a simple cycle;</strong></span><br><span style=\"color: #33cccc;\"><strong>Not a TS cycle if it is NOT a cycle that visits every city.</strong></span><br><span style=\"color: #33cccc;\"><strong>Finally print in a line Shortest Dist(X) = TotalDist where X is the index of the cycle that is the closest to the solution of a travelling salesman problem, and TotalDist is its total distance. It is guaranteed that such a solution is unique.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Sample Input:</strong></span><br><span style=\"color: #33cccc;\"><strong>6 10</strong></span><br><span style=\"color: #33cccc;\"><strong>6 2 1</strong></span><br><span style=\"color: #33cccc;\"><strong>3 4 1</strong></span><br><span style=\"color: #33cccc;\"><strong>1 5 1</strong></span><br><span style=\"color: #33cccc;\"><strong>2 5 1</strong></span><br><span style=\"color: #33cccc;\"><strong>3 1 8</strong></span><br><span style=\"color: #33cccc;\"><strong>4 1 6</strong></span><br><span style=\"color: #33cccc;\"><strong>1 6 1</strong></span><br><span style=\"color: #33cccc;\"><strong>6 3 1</strong></span><br><span style=\"color: #33cccc;\"><strong>1 2 1</strong></span><br><span style=\"color: #33cccc;\"><strong>4 5 1</strong></span><br><span style=\"color: #33cccc;\"><strong>7</strong></span><br><span style=\"color: #33cccc;\"><strong>7 5 1 4 3 6 2 5</strong></span><br><span style=\"color: #33cccc;\"><strong>7 6 1 3 4 5 2 6</strong></span><br><span style=\"color: #33cccc;\"><strong>6 5 1 4 3 6 2</strong></span><br><span style=\"color: #33cccc;\"><strong>9 6 2 1 6 3 4 5 2 6</strong></span><br><span style=\"color: #33cccc;\"><strong>4 1 2 5 1</strong></span><br><span style=\"color: #33cccc;\"><strong>7 6 1 2 5 4 3 1</strong></span><br><span style=\"color: #33cccc;\"><strong>7 6 3 2 5 4 1 6</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output:</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 1: 11 (TS simple cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 2: 13 (TS simple cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 3: 10 (Not a TS cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 4: 8 (TS cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 5: 3 (Not a TS cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 6: 13 (Not a TS cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Path 7: NA (Not a TS cycle)</strong></span><br><span style=\"color: #33cccc;\"><strong>Shortest Dist(4) = 8</strong></span></p><p><strong><span style=\"color: #99cc00;\">题目大意：给出一条路径，判断这条路径是这个图的旅行商环路、简单旅行商环路还是非旅行商环路～</span></strong></p><p><strong><span style=\"color: #ff9900;\">分析：如果给出的路径存在某两个连续的点不可达或者第一个结点和最后一个结点不同或者这个路径没有访问过图中所有的点，那么它就不是一个旅行商环路(flag = 0)～如果满足了旅行商环路的条件，那么再判断这个旅行商环路是否是简单旅行商环路，即是否访问过n+1个结点（源点访问两次）～最后输出这些旅行商环路中经过的路径最短的路径编号和路径长度～</span></strong></p><p></p>"
    },
    "6500": {
        "title": "PAT 1149 Dangerous Goods Packaging（25 分）- 甲级",
        "time": "2018-09-08T23:02:34+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>When shipping goods with containers, we have to be careful not to pack some incompatible goods into the same container, or we might get ourselves in serious trouble. For example, oxidizing agent （氧化剂） must not be packed with flammable liquid （易燃液体）, or it can cause explosion.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Now you are given a long list of incompatible goods, and several lists of goods to be shipped. You are supposed to tell if all the goods in a list can be packed into the same container.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Input Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>Each input file contains one test case. For each case, the first line gives two positive integers: N (≤10^4), the number of pairs of incompatible goods, and M (≤100), the number of lists of goods to be shipped.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Then two blocks follow. The first block contains N pairs of incompatible goods, each pair occupies a line; and the second one contains M lists of goods to be shipped, each list occupies a line in the following format:</strong></span></p><p><span style=\"color: #33cccc;\"><strong>K G[1] G[2] … G[K]</strong></span><br><span style=\"color: #33cccc;\"><strong>where K (≤1,000) is the number of goods and G[i]’s are the IDs of the goods. To make it simple, each good is represented by a 5-digit ID number. All the numbers in a line are separated by spaces.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Output Specification:</strong></span><br><span style=\"color: #33cccc;\"><strong>For each shipping list, print in a line Yes if there are no incompatible goods in the list, or No if not.</strong></span></p><p><span style=\"color: #33cccc;\"><strong>Sample Input:</strong></span><br><span style=\"color: #33cccc;\"><strong>6 3</strong></span><br><span style=\"color: #33cccc;\"><strong>20001 20002</strong></span><br><span style=\"color: #33cccc;\"><strong>20003 20004</strong></span><br><span style=\"color: #33cccc;\"><strong>20005 20006</strong></span><br><span style=\"color: #33cccc;\"><strong>20003 20001</strong></span><br><span style=\"color: #33cccc;\"><strong>20005 20004</strong></span><br><span style=\"color: #33cccc;\"><strong>20004 20006</strong></span><br><span style=\"color: #33cccc;\"><strong>4 00001 20004 00002 20003</strong></span><br><span style=\"color: #33cccc;\"><strong>5 98823 20002 20003 20006 10010</strong></span><br><span style=\"color: #33cccc;\"><strong>3 12345 67890 23333</strong></span><br><span style=\"color: #33cccc;\"><strong>Sample Output:</strong></span><br><span style=\"color: #33cccc;\"><strong>No</strong></span><br><span style=\"color: #33cccc;\"><strong>Yes</strong></span><br><span style=\"color: #33cccc;\"><strong>Yes</strong></span></p><p><span style=\"color: #99cc00;\"><strong>题目大意：集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 Yes，否则输出 No～</strong></span></p><p><strong><span style=\"color: #ff9900;\">分析：用map存储每一个货物的所有不兼容货物～在判断给出的一堆货物是否是相容的时候，判断任一货物的不兼容货物是否在这堆货物中～如果存在不兼容的货物，则这堆货物不能相容～如果遍历完所有的货物，都找不到不兼容的两个货物，则这堆货物就是兼容的～</span></strong></p><p></p>"
    },
    "6503": {
        "title": "PAT 1089 狼人杀-简单版（20 分）- 乙级",
        "time": "2018-09-08T22:41:49+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？</span></strong></p><p><strong><span style=\"color: #33cccc;\">本题是这个问题的升级版：已知 N 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？</span></strong></p><p><strong><span style=\"color: #33cccc;\">输入格式：</span></strong><br><strong><span style=\"color: #33cccc;\">输入在第一行中给出一个正整数 N（5≤N≤100）。随后 N 行，第 i 行给出第 i 号玩家说的话（1≤i≤N），即一个玩家编号，用正号表示好人，负号表示狼人。</span></strong></p><p><strong><span style=\"color: #33cccc;\">输出格式：</span></strong><br><strong><span style=\"color: #33cccc;\">如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 A=a[1],…,a[M] 和 B=b[1],…,b[M]，若存在 0≤k[k+1]&lt;b[k+1]，则称序列 A 小于序列 B。若无解则输出 No Solution。</span></strong></p><p><strong><span style=\"color: #33cccc;\">输入样例 1：</span></strong><br><strong><span style=\"color: #33cccc;\">5</span></strong><br><strong><span style=\"color: #33cccc;\">-2</span></strong><br><strong><span style=\"color: #33cccc;\">+3</span></strong><br><strong><span style=\"color: #33cccc;\">-4</span></strong><br><strong><span style=\"color: #33cccc;\">+5</span></strong><br><strong><span style=\"color: #33cccc;\">+4</span></strong><br><strong><span style=\"color: #33cccc;\">输出样例 1：</span></strong><br><strong><span style=\"color: #33cccc;\">1 4</span></strong><br><strong><span style=\"color: #33cccc;\">输入样例 2：</span></strong><br><strong><span style=\"color: #33cccc;\">6</span></strong><br><strong><span style=\"color: #33cccc;\">+6</span></strong><br><strong><span style=\"color: #33cccc;\">+3</span></strong><br><strong><span style=\"color: #33cccc;\">+1</span></strong><br><strong><span style=\"color: #33cccc;\">-5</span></strong><br><strong><span style=\"color: #33cccc;\">-2</span></strong><br><strong><span style=\"color: #33cccc;\">+4</span></strong><br><strong><span style=\"color: #33cccc;\">输出样例 2（解不唯一）：</span></strong><br><strong><span style=\"color: #33cccc;\">1 5</span></strong><br><strong><span style=\"color: #33cccc;\">输入样例 3：</span></strong><br><strong><span style=\"color: #33cccc;\">5</span></strong><br><strong><span style=\"color: #33cccc;\">-2</span></strong><br><strong><span style=\"color: #33cccc;\">-3</span></strong><br><strong><span style=\"color: #33cccc;\">-4</span></strong><br><strong><span style=\"color: #33cccc;\">-5</span></strong><br><strong><span style=\"color: #33cccc;\">-1</span></strong><br><strong><span style=\"color: #33cccc;\">输出样例 3：</span></strong><br><strong><span style=\"color: #33cccc;\">No Solution</span></strong></p><p><span style=\"color: #ff9900;\"><strong>分析：每个人说的数字保存在v数组中，i从1～n、j从i+1～n遍历，分别假设i和j是狼人，a数组表示该人是狼人还是好人，等于1表示是好人，等于-1表示是狼人。k从1～n分别判断k所说的话是真是假，k说的话和真实情况不同（即v[k] * a[abs(v[k])] &lt; 0）则表示k在说谎，则将k放在lie数组中；遍历完成后判断lie数组，如果说谎人数等于2并且这两个说谎的人一个是好人一个是狼人（即a[lie[0]] + a[lie[1]] == 0）表示满足题意，此时输出i和j并return，否则最后的时候输出No Solution～</strong></span></p><p></p>"
    },
    "6505": {
        "title": "PAT 1086 就不告诉你（15 分）- 乙级",
        "time": "2018-09-08T22:30:45+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</span></strong></p><p><strong><span style=\"color: #33cccc;\">输入格式：</span></strong><br><strong><span style=\"color: #33cccc;\">输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</span></strong></p><p><strong><span style=\"color: #33cccc;\">输出格式：</span></strong><br><strong><span style=\"color: #33cccc;\">在一行中倒着输出 A 和 B 的乘积。</span></strong></p><p><strong><span style=\"color: #33cccc;\">输入样例：</span></strong><br><strong><span style=\"color: #33cccc;\">5 7</span></strong><br><strong><span style=\"color: #33cccc;\">输出样例：</span></strong><br><strong><span style=\"color: #33cccc;\">53</span></strong></p><p><strong><span style=\"color: #ff9900;\">分析：a 和 b的乘积转换成字符串，再将字符串反转，最后将反转过的字符串转换成数字～</span></strong></p><p></p>"
    },
    "6507": {
        "title": "PAT 1087 有多少不同的值（20 分）- 乙级",
        "time": "2018-09-08T22:22:52+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>当自然数 n 依次取 1、2、3、……、N 时，算式 ⌊n/2⌋+⌊n/3⌋+⌊n/5⌋ 有多少个不同的值？（注：⌊x⌋ 为取整函数，表示不超过 x 的最大自然数，即 x 的整数部分。）</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入给出一个正整数 N（2≤N≤10</strong></span><span style=\"color: #33cccc;\"><strong>​4</strong></span><span style=\"color: #33cccc;\"><strong>​​）。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出题面中算式取到的不同值的个数。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2017</strong></span><br><span style=\"color: #33cccc;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>1480</strong></span></p><p><span style=\"color: #ff9900;\"><strong>分析：把i/2 + i/3 + i/n的值插入到set中，输出set的size就是算式中不同值的个数～</strong></span></p><p></p>"
    },
    "6509": {
        "title": "PAT 1090 危险品装箱（25 分）- 乙级",
        "time": "2018-09-08T22:12:38+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出两个正整数：N (≤10^4) 是成对的不相容物品的对数；M (≤100) 是集装箱货品清单的单数。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>随后数据分两大块给出。第一块有 N 行，每行给出一对不相容的物品。第二块有 M 行，每行给出一箱货物的清单，格式如下：</strong></span></p><p><span style=\"color: #33cccc;\"><strong>K G[1] G[2] … G[K]</strong></span><br><span style=\"color: #33cccc;\"><strong>其中 K (≤1000) 是物品件数，G[i] 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 Yes，否则输出 No。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>6 3</strong></span><br><span style=\"color: #33cccc;\"><strong>20001 20002</strong></span><br><span style=\"color: #33cccc;\"><strong>20003 20004</strong></span><br><span style=\"color: #33cccc;\"><strong>20005 20006</strong></span><br><span style=\"color: #33cccc;\"><strong>20003 20001</strong></span><br><span style=\"color: #33cccc;\"><strong>20005 20004</strong></span><br><span style=\"color: #33cccc;\"><strong>20004 20006</strong></span><br><span style=\"color: #33cccc;\"><strong>4 00001 20004 00002 20003</strong></span><br><span style=\"color: #33cccc;\"><strong>5 98823 20002 20003 20006 10010</strong></span><br><span style=\"color: #33cccc;\"><strong>3 12345 67890 23333</strong></span><br><span style=\"color: #33cccc;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>No</strong></span><br><span style=\"color: #33cccc;\"><strong>Yes</strong></span><br><span style=\"color: #33cccc;\"><strong>Yes</strong></span></p><p><strong><span style=\"color: #ff9900;\">分析：用map存储每一个货物的所有不兼容货物～在判断给出的一堆货物是否是相容的时候，判断任一货物的不兼容货物是否在这堆货物中～如果存在不兼容的货物，则这堆货物不能相容～如果遍历完所有的货物，都找不到不兼容的两个货物，则这堆货物就是兼容的～</span></strong></p><p></p>"
    },
    "5646": {
        "title": "L2-028 秀恩爱分得快-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-31T16:34:45+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L2-028 秀恩爱分得快（25 分）</strong></span><br><span style=\"color: #33cccc;\"><strong>古人云：秀恩爱，分得快。</strong></span><br><span style=\"color: #33cccc;\"><strong>互联网上每天都有大量人发布大量照片，我们通过分析这些照片，可以分析人与人之间的亲密度。如果一张照片上出现了 K 个人，这些人两两间的亲密度就被定义为 1/K。任意两个人如果同时出现在若干张照片里，他们之间的亲密度就是所有这些同框照片对应的亲密度之和。下面给定一批照片，请你分析一对给定的情侣，看看他们分别有没有亲密度更高的异性朋友？</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出 2 个正整数：N（不超过1000，为总人数——简单起见，我们把所有人从 0 到 N-1 编号。为了区分性别，我们用编号前的负号表示女性）和 M（不超过1000，为照片总数）。随后 M 行，每行给出一张照片的信息，格式如下：</strong></span><br><span style=\"color: #33cccc;\"><strong>K P[1] … P[K]</strong></span><br><span style=\"color: #33cccc;\"><strong>其中 K（&lt;= 500）是该照片中出现的人数，P[1] ~ P[K] 就是这些人的编号。最后一行给出一对异性情侣的编号 A 和 B。同行数字以空格分隔。题目保证每个人只有一个性别，并且不会在同一张照片里出现多次。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>首先输出“A PA”，其中 PA 是与 A 最亲密的异性。如果 PA 不唯一，则按他们编号的绝对值递增输出；然后类似地输出“B PB”。但如果 A 和 B 正是彼此亲密度最高的一对，则只输出他们的编号，无论是否还有其他人并列。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例 1：</strong></span><br><span style=\"color: #33cccc;\"><strong>10 4</strong></span><br><span style=\"color: #33cccc;\"><strong>4 -1 2 -3 4</strong></span><br><span style=\"color: #33cccc;\"><strong>4 2 -3 -5 -6</strong></span><br><span style=\"color: #33cccc;\"><strong>3 2 4 -5</strong></span><br><span style=\"color: #33cccc;\"><strong>3 -6 0 2</strong></span><br><span style=\"color: #33cccc;\"><strong>-3 2</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例 1：</strong></span><br><span style=\"color: #33cccc;\"><strong>-3 2</strong></span><br><span style=\"color: #33cccc;\"><strong>2 -5</strong></span><br><span style=\"color: #33cccc;\"><strong>2 -6</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例 2：</strong></span><br><span style=\"color: #33cccc;\"><strong>4 4</strong></span><br><span style=\"color: #33cccc;\"><strong>4 -1 2 -3 0</strong></span><br><span style=\"color: #33cccc;\"><strong>2 0 -3</strong></span><br><span style=\"color: #33cccc;\"><strong>2 2 -3</strong></span><br><span style=\"color: #33cccc;\"><strong>2 -1 2</strong></span><br><span style=\"color: #33cccc;\"><strong>-3 2</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例 2：</strong></span><br><span style=\"color: #33cccc;\"><strong>-3 2</strong></span></p><p><span style=\"color: #ff9900;\"><strong>分析：1.此题考查的是对 0 -0 的特殊处理。当遇到 0 时候把此人转为1000存储, 所以读数据的时候要以字符串形式读取</strong></span><br><span style=\"color: #ff9900;\"><strong>2.遍历每张照片，把与男主女主对应的异性亲密度用sum数字累加起来， 并维护maxn[1] maxn[2]， 为男主女主的最亲密值 和ans[1], ans[2]容器，为最亲密异性id。</strong></span><br><span style=\"color: #ff9900;\"><strong>3.判断男主女主是否互为最亲密，如果是，输出并return 0， 否则分别输出他们的最亲密好友</strong></span><br><span style=\"color: #ff9900;\"><strong>4.注意输出时候，因为把0当1000存储，会导致0号人排在最后，这是不符题意的，输出之前排个序，让1000排在最前面</strong></span></p><p></p>"
    },
    "5589": {
        "title": "L2-024. 部落-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-29T16:39:02+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">在一个社区里，每个人都有自己的小圈子，还可能同时属于很多不同的朋友圈。我们认为朋友的朋友都算在一个部落里，于是要请你统计一下，在一个给定社区中，到底有多少个互不相交的部落？并且检查任意两个人是否属于同一个部落。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入在第一行给出一个正整数N（&lt;= 10^4^），是已知小圈子的个数。随后N行，每行按下列格式给出一个小圈子里的人：</span></strong><br><strong><span style=\"color: #33cccc;\">K P[1] P[2] … P[K]</span></strong><br><strong><span style=\"color: #33cccc;\">其中K是小圈子里的人数，P[i]（i=1, .., K）是小圈子里每个人的编号。这里所有人的编号从1开始连续编号，最大编号不会超过10^4^。</span></strong><br><strong><span style=\"color: #33cccc;\">之后一行给出一个非负整数Q（&lt;= 10^4^），是查询次数。随后Q行，每行给出一对被查询的人的编号。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">首先在一行中输出这个社区的总人数、以及互不相交的部落的个数。随后对每一次查询，如果他们属于同一个部落，则在一行中输出“Y”，否则输出“N”。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">4</span></strong><br><strong><span style=\"color: #33cccc;\">3 10 1 2</span></strong><br><strong><span style=\"color: #33cccc;\">2 3 4</span></strong><br><strong><span style=\"color: #33cccc;\">4 1 5 7 8</span></strong><br><strong><span style=\"color: #33cccc;\">3 9 6 4</span></strong><br><strong><span style=\"color: #33cccc;\">2</span></strong><br><strong><span style=\"color: #33cccc;\">10 5</span></strong><br><strong><span style=\"color: #33cccc;\">3 7</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">10 2</span></strong><br><strong><span style=\"color: #33cccc;\">Y</span></strong><br><strong><span style=\"color: #33cccc;\">N</span></strong></p><p> </p>"
    },
    "5585": {
        "title": "L2-018. 多项式A除以B -PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-29T16:24:53+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>这仍然是一道关于A/B的题，只不过A和B都换成了多项式。你需要计算两个多项式相除的商Q和余R，其中R的阶数必须小于B的阶数。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入分两行，每行给出一个非零多项式，先给出A，再给出B。每行的格式如下：</strong></span></p><p><span style=\"color: #33cccc;\"><strong>N e[1] c[1] … e[N] c[N]</strong></span><br><span style=\"color: #33cccc;\"><strong>其中N是该多项式非零项的个数，e[i]是第i个非零项的指数，c[i]是第i个非零项的系数。各项按照指数递减的顺序给出，保证所有指数是各不相同的非负整数，所有系数是非零整数，所有整数在整型范围内。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>分两行先后输出商和余，输出格式与输入格式相同，输出的系数保留小数点后1位。同行数字间以1个空格分隔，行首尾不得有多余空格。注意：零多项式是一个特殊多项式，对应输出为0 0 0.0。但非零多项式不能输出零系数（包括舍入后为0.0）的项。在样例中，余多项式其实有常数项-1/27，但因其舍入后为0.0，故不输出。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>4 4 1 2 -3 1 -1 0 -1</strong></span><br><span style=\"color: #33cccc;\"><strong>3 2 3 1 -2 0 1</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>3 2 0.3 1 0.2 0 -1.0</strong></span><br><span style=\"color: #33cccc;\"><strong>1 1 -3.1</strong></span></p><p><strong><span style=\"color: #ff9900;\">分析：对于两个多项式A和B，题目给出的必定不会是连续降幂的，根据多项式的除法原理，我们需要缺幂项补零。例如，题中给出的$x^4-3x^2-x-1$是缺3次幂的，将缺幂项补上之后，就变成了$x^4+0x^3-3x^2-x-1$。由此，我们可以用一个数组来保存一个多项式，即数组的下标对应多项式的指数，下标对应的单元表示多项式的系数，如数组[-1, -1, -3, 0, 1]。<br></span></strong><strong><span style=\"color: #ff9900;\">若已知A多项式的最高次幂为t1, B多项式的最高次幂为t2, 则第一次除法商的最高次幂为t1 – t2, 最高次幂的系数为A[t1] / B[t2], 然后用A[i] -= B[i – (t1 – t2)] * A[t1] / B[t2], 其中i从A的最高次幂t1到大于等于t1 – t2, 这样就算完成了一个除法了。例如A = [-1, -1, -3, 0, 1], B = [1, -2, 3], 则t1 = 4, t2= 2, 所以第一次除法商的最高次幂为2, 系数为A[4] / A[2] = 0.3, 循环A[i] -= B[i – (t1 – t2)] * A[t1] / B[t2], i从4到2, 得到新的A=[-1, -1, -10/3, 2/3, 0], 然后重复上面的步骤, 直到A的最高项幂次小于B的最高项幂次, 此时的A就是余项。</span></strong></p><p><strong><span class=\"\" style=\"color: #ff9900;\">[两个可能会让结果出现非零项多项式的测试用例]<br></span></strong><span style=\"color: #99cc00;\"><strong>1 2 1</strong></span><br><span style=\"color: #99cc00;\"><strong>1 3 1</strong></span></p><p><span style=\"color: #99cc00;\"><strong>1 2 1</strong></span><br><span style=\"color: #99cc00;\"><strong> 1 2 1<br></strong></span><strong><span class=\"\" style=\"color: #ff9900;\">[一个比较好算一点的一般测试用例]<br></span></strong><span style=\"color: #99cc00;\"><strong>3 3 1 2 -12 0 -42</strong></span><br><span style=\"color: #99cc00;\"><strong>2 1 1 0 -3</strong></span><br><span style=\"color: #99cc00;\"><strong>// ouput</strong></span><br><span style=\"color: #99cc00;\"><strong>3 2 1.0 1 -9.0 0 -27.0</strong></span><br><span style=\"color: #99cc00;\"><strong>1 0 -123.0</strong></span></p><p><strong><span style=\"color: #ff9900;\">具体代码如下：</span></strong></p><p></p>"
    },
    "5568": {
        "title": "[Python] L1-056 猜数字-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T20:00:08+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>一群人坐在一起，每人猜一个 100 以内的数，谁的数字最接近大家平均数的一半就赢。本题就要求你找出其中的赢家。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出一个正整数N（&lt;= 10^4^）。随后 N 行，每行给出一个玩家的名字（由不超过8个英文字母组成的字符串）和其猜的正整数（&lt;= 100）。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中顺序输出：大家平均数的一半（只输出整数部分）、赢家的名字，其间以空格分隔。题目保证赢家是唯一的。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>7</strong></span><br><span style=\"color: #33cccc;\"><strong>Bob 35</strong></span><br><span style=\"color: #33cccc;\"><strong>Amy 28</strong></span><br><span style=\"color: #33cccc;\"><strong>James 98</strong></span><br><span style=\"color: #33cccc;\"><strong>Alice 11</strong></span><br><span style=\"color: #33cccc;\"><strong>Jack 45</strong></span><br><span style=\"color: #33cccc;\"><strong>Smith 33</strong></span><br><span style=\"color: #33cccc;\"><strong>Chris 62</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>22 Amy</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5566": {
        "title": "[Python] L1-055 谁是赢家-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:58:53+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>某电视台的娱乐节目有个表演评审环节，每次安排两位艺人表演，他们的胜负由观众投票和3名评委投票两部分共同决定。规则为：如果一位艺人的观众票数高，且得到至少1名评委的认可，该艺人就胜出；或艺人的观众票数低，但得到全部评委的认可，也可以胜出。节目保证投票的观众人数为奇数，所以不存在平票的情况。本题就请你用程序判断谁是赢家。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出 2 个不超过 1000 的正整数 Pa 和 Pb，分别是艺人 a 和艺人 b 得到的观众票数。题目保证这两个数字不相等。随后第二行给出 3 名评委的投票结果。数字 0 代表投票给 a，数字 1 代表投票给 b，其间以一个空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>按以下格式输出赢家：</strong></span><br><span style=\"color: #33cccc;\"><strong>The winner is x: P1 + P2</strong></span><br><span style=\"color: #33cccc;\"><strong>其中 x 是代表赢家的字母，P1 是赢家得到的观众票数，P2 是赢家得到的评委票数。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>327 129</strong></span><br><span style=\"color: #33cccc;\"><strong>1 0 1</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>The winner is a: 327 + 1</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p> </p>"
    },
    "5564": {
        "title": "[Python] L1-053 电子汪-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:57:34+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>据说汪星人的智商能达到人类4岁儿童的水平，更有些聪明汪会做加法计算。比如你在地上放两堆小球，分别有1只球和2只球，聪明汪就会用“汪！汪！汪！”表示1加2的结果是3。</strong></span><br><span style=\"color: #33cccc;\"><strong>本题要求你为电子宠物汪做一个模拟程序，根据电子眼识别出的两堆小球的个数，计算出和，并且用汪星人的叫声给出答案。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出两个[1, 9]区间内的正整数A和B，用空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出A+B个“Wang!”。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2 1</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>Wang!Wang!Wang!</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5562": {
        "title": "[Python] L1-052 2018我们要赢-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:56:32+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>2018年天梯赛的注册邀请码是“2018wmyy”，意思就是“2018我们要赢”。本题就请你用汉语拼音输出这句话。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>本题没有输入。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在第一行中输出：“2018”；第二行中输出：“wo3 men2 yao4 ying2 !”。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>本题没有输入。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2018</strong></span><br><span style=\"color: #33cccc;\"><strong>wo3 men2 yao4 ying2 !</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5558": {
        "title": "[Python] L1-051 打折-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:54:40+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>去商场淘打折商品时，计算打折以后的价钱是件颇费脑子的事情。例如原价 ￥988，标明打 7 折，则折扣价应该是 ￥988 x 70% = ￥691.60。本题就请你写个程序替客户计算折扣价。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出商品的原价（不超过1万元的正整数）和折扣（为[1, 9]区间内的整数），其间以空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出商品的折扣价，保留小数点后 2 位。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>988 7</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>691.60</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5554": {
        "title": "[Python] L1-047 装睡-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:53:28+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">你永远叫不醒一个装睡的人 —— 但是通过分析一个人的呼吸频率和脉搏，你可以发现谁在装睡！医生告诉我们，正常人睡眠时的呼吸频率是每分钟15-20次，脉搏是每分钟50-70次。下面给定一系列人的呼吸频率与脉搏，请你找出他们中间有可能在装睡的人，即至少一项指标不在正常范围内的人。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输入格式：<br></strong></span><strong><span style=\"color: #33cccc;\">输入在第一行给出一个正整数N（&lt;= 10）。随后N行，每行给出一个人的名字（仅由英文字母组成的、长度不超过3个字符的串）、其呼吸频率和脉搏（均为不超过100的正整数）。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输出格式：<br></strong></span><strong><span style=\"color: #33cccc;\">按照输入顺序检查每个人，如果其至少一项指标不在正常范围内，则输出其名字，每个名字占一行。</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">4</span></strong><br><strong><span style=\"color: #33cccc;\">Amy 15 70</span></strong><br><strong><span style=\"color: #33cccc;\">Tom 14 60</span></strong><br><strong><span style=\"color: #33cccc;\">Joe 18 50</span></strong><br><strong><span style=\"color: #33cccc;\">Zoe 21 71</span></strong></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">Tom</span></strong><br><strong><span style=\"color: #33cccc;\">Zoe</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5552": {
        "title": "[Python] L1-045 宇宙无敌大招呼-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:51:37+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>据说所有程序员学习的第一个程序都是在屏幕上输出一句“Hello World”，跟这个世界打个招呼。作为天梯赛中的程序员，你写的程序得高级一点，要能跟任意指定的星球打招呼。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出一个星球的名字S，是一个由不超过7个英文字母组成的单词，以回车结束。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出“Hello S”，跟输入的S星球打个招呼。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>Mars</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>Hello Mars</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5549": {
        "title": "[Python] L1-042 日期格式化-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:50:36+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>世界上不同国家有不同的写日期的习惯。比如美国人习惯写成“月-日-年”，而中国人习惯写成“年-月-日”。下面请你写个程序，自动把读入的美国格式的日期改写成中国习惯的日期。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>输入在一行中按照“mm-dd-yyyy”的格式给出月、日、年。题目保证给出的日期是1900年元旦至今合法的日期。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>在一行中按照“yyyy-mm-dd”的格式给出年、月、日。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>03-15-2017</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2017-03-15</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5547": {
        "title": "[Python] L1-041 寻找250-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:49:24+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>对方不想和你说话，并向你扔了一串数…… 而你必须从这一串数字中找到“250”这个高大上的感人数字。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出不知道多少个绝对值不超过1000的整数，其中保证至少存在一个“250”。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出第一次出现的“250”是对方扔过来的第几个数字（计数从1开始）。题目保证输出的数字在整型范围内。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>888 666 123 -233 250 13 250 -222</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>5</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p> </p>"
    },
    "5544": {
        "title": "[Python] L1-040. 最佳情侣身高差 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:45:50+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>专家通过多组情侣研究数据发现，最佳的情侣身高差遵循着一个公式：（女方的身高）×1.09=（男方的身高）。如果符合，你俩的身高差不管是牵手、拥抱、接吻，都是最和谐的差度。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>下面就请你写个程序，为任意一位用户计算他/她的情侣的最佳身高。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出正整数N（&lt;=10），为前来查询的用户数。随后N行，每行按照“性别 身高”的格式给出前来查询的用户的性别和身高，其中“性别”为“F”表示女性、“M”表示男性；“身高”为区间 [1.0, 3.0] 之间的实数。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>对每一个查询，在一行中为该用户计算出其情侣的最佳身高，保留小数点后2位。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2</strong></span><br><span style=\"color: #33cccc;\"><strong>M 1.75</strong></span><br><span style=\"color: #33cccc;\"><strong>F 1.8</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>1.61</strong></span><br><span style=\"color: #33cccc;\"><strong>1.96</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5542": {
        "title": "[Python] L1-038. 新世界 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:44:35+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>这道超级简单的题目没有任何输入。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>你只需要在第一行中输出程序员钦定名言“Hello World”，并且在第二行中输出更新版的“Hello New World”就可以了。</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p> </p>"
    },
    "5537": {
        "title": "[Python] L1-037. A除以B 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:42:47+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>真的是简单题哈 —— 给定两个绝对值不超过100的整数A和B，要求你按照“A/B=商”的格式输出结果。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出两个整数A和B（-100 &lt;= A, B, &lt;= 100），数字间以空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出结果：如果分母是正数，则输出“A/B=商”；如果分母是负数，则要用括号把分母括起来输出；如果分母为零，则输出的商应为“Error”。输出的商应保留小数点后2位。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>-1 2</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>-1/2=-0.50</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>1 -3</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>1/(-3)=-0.33</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>5 0</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>5/0=Error</strong></span></p><p><span style=\"color: #33cccc;\"><strong><span style=\"color: #ff99cc;\">PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</span></strong></span></p><p></p>"
    },
    "5534": {
        "title": "[Python] L1-036. A乘以B 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:41:13+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>看我没骗你吧 —— 这是一道你可以在10秒内完成的题：给定两个绝对值不超过100的整数A和B，输出A乘以B的值。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出两个整数A和B（-100 &lt;= A, B, &lt;= 100），数字间以空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出A乘以B的值。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>-8 13</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>-104</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5531": {
        "title": "[Python] L1-035. 情人节 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:39:47+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>以上是朋友圈中一奇葩贴：“2月14情人节了，我决定造福大家。第2个赞和第14个赞的，我介绍你俩认识…………咱三吃饭…你俩请…”。现给出此贴下点赞的朋友名单，请你找出那两位要请客的倒霉蛋。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入按照点赞的先后顺序给出不知道多少个点赞的人名，每个人名占一行，为不超过10个英文字母的非空单词，以回车结束。一个英文句点“.”标志输入的结束，这个符号不算在点赞名单里。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>根据点赞情况在一行中输出结论：若存在第2个人A和第14个人B，则输出“A and B are inviting you to dinner…”；若只有A没有B，则输出“A is the only one for you…”；若连A都没有，则输出“Momo… No one is for you …”。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>GaoXZh</strong></span><br><span style=\"color: #33cccc;\"><strong>Magi</strong></span><br><span style=\"color: #33cccc;\"><strong>Einst</strong></span><br><span style=\"color: #33cccc;\"><strong>Quark</strong></span><br><span style=\"color: #33cccc;\"><strong>LaoLao</strong></span><br><span style=\"color: #33cccc;\"><strong>FatMouse</strong></span><br><span style=\"color: #33cccc;\"><strong>ZhaShen</strong></span><br><span style=\"color: #33cccc;\"><strong>fantacy</strong></span><br><span style=\"color: #33cccc;\"><strong>latesum</strong></span><br><span style=\"color: #33cccc;\"><strong>SenSen</strong></span><br><span style=\"color: #33cccc;\"><strong>QuanQuan</strong></span><br><span style=\"color: #33cccc;\"><strong>whatever</strong></span><br><span style=\"color: #33cccc;\"><strong>whenever</strong></span><br><span style=\"color: #33cccc;\"><strong>Potaty</strong></span><br><span style=\"color: #33cccc;\"><strong>hahaha</strong></span><br><span style=\"color: #33cccc;\"><strong>.</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>Magi and Potaty are inviting you to dinner…</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>LaoLao</strong></span><br><span style=\"color: #33cccc;\"><strong>FatMouse</strong></span><br><span style=\"color: #33cccc;\"><strong>whoever</strong></span><br><span style=\"color: #33cccc;\"><strong>.</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>FatMouse is the only one for you…</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>LaoLao</strong></span><br><span style=\"color: #33cccc;\"><strong>.</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>Momo… No one is for you …</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5528": {
        "title": "[Python] L1-034. 点赞 团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:37:45+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。本题就要求你写个程序，通过统计一个人点赞的纪录，分析这个人的特性。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在第一行给出一个正整数N（&lt;=1000），是该用户点赞的博文数量。随后N行，每行给出一篇被其点赞的博文的特性描述，格式为“K F1 … FK”，其中 1&lt;=K&lt;=10，Fi（i=1, …, K）是特性标签的编号，我们将所有特性标签从1到1000编号。数字间以空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>统计所有被点赞的博文中最常出现的那个特性标签，在一行中输出它的编号和出现次数，数字间隔1个空格。如果有并列，则输出编号最大的那个。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>4</strong></span><br><span style=\"color: #33cccc;\"><strong>3 889 233 2</strong></span><br><span style=\"color: #33cccc;\"><strong>5 100 3 233 2 73</strong></span><br><span style=\"color: #33cccc;\"><strong>4 3 73 889 2</strong></span><br><span style=\"color: #33cccc;\"><strong>2 233 123</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>233 3</strong></span></p><p></p>"
    },
    "5525": {
        "title": "[Python] L1-031. 到底是不是太胖了-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:36:26+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>据说一个人的标准体重应该是其身高（单位：厘米）减去100、再乘以0.9所得到的公斤数。真实体重与标准体重误差在10%以内都是完美身材（即 |真实体重-标准体重| &lt; 标准体重x10%）。已知市斤是公斤的两倍。现给定一群人的身高和实际体重，请你告诉他们是否太胖或太瘦了。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出一个正整数N（&lt;= 20）。随后N行，每行给出两个整数，分别是一个人的身高H（120 &lt; H &lt; 200；单位：厘米）和真实体重W（50 &lt; W &lt;= 300；单位：市斤），其间以空格分隔。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>为每个人输出一行结论：如果是完美身材，输出“You are wan mei!”；如果太胖了，输出“You are tai pang le!”；否则输出“You are tai shou le!”。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>3</strong></span><br><span style=\"color: #33cccc;\"><strong>169 136</strong></span><br><span style=\"color: #33cccc;\"><strong>150 81</strong></span><br><span style=\"color: #33cccc;\"><strong>178 155</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>You are wan mei!</strong></span><br><span style=\"color: #33cccc;\"><strong>You are tai shou le!</strong></span><br><span style=\"color: #33cccc;\"><strong>You are tai pang le!</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5522": {
        "title": "[Python] L1-030. 一帮一-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:35:07+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>“一帮一学习小组”是中小学中常见的学习组织方式，老师把学习成绩靠前的学生跟学习成绩靠后的学生排在一组。本题就请你编写程序帮助老师自动完成这个分配工作，即在得到全班学生的排名后，在当前尚未分组的学生中，将名次最靠前的学生与名次最靠后的异性学生分为一组。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出正偶数N（&lt;=50），即全班学生的人数。此后N行，按照名次从高到低的顺序给出每个学生的性别（0代表女生，1代表男生）和姓名（不超过8个英文字母的非空字符串），其间以1个空格分隔。这里保证本班男女比例是1:1，并且没有并列名次。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>每行输出一组两个学生的姓名，其间以1个空格分隔。名次高的学生在前，名次低的学生在后。小组的输出顺序按照前面学生的名次从高到低排列。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>8</strong></span><br><span style=\"color: #33cccc;\"><strong>0 Amy</strong></span><br><span style=\"color: #33cccc;\"><strong>1 Tom</strong></span><br><span style=\"color: #33cccc;\"><strong>1 Bill</strong></span><br><span style=\"color: #33cccc;\"><strong>0 Cindy</strong></span><br><span style=\"color: #33cccc;\"><strong>0 Maya</strong></span><br><span style=\"color: #33cccc;\"><strong>1 John</strong></span><br><span style=\"color: #33cccc;\"><strong>1 Jack</strong></span><br><span style=\"color: #33cccc;\"><strong>0 Linda</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>Amy Jack</strong></span><br><span style=\"color: #33cccc;\"><strong>Tom Linda</strong></span><br><span style=\"color: #33cccc;\"><strong>Bill Maya</strong></span><br><span style=\"color: #33cccc;\"><strong>Cindy John</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5519": {
        "title": "[Python] L1-029. 是不是太胖了-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:33:37+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>据说一个人的标准体重应该是其身高（单位：厘米）减去100、再乘以0.9所得到的公斤数。已知市斤是公斤的两倍。现给定某人身高，请你计算其标准体重应该是多少？（顺便也悄悄给自己算一下吧……）</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出一个正整数H（100 &lt; H &lt;= 300），为某人身高。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出对应的标准体重，单位为市斤，保留小数点后1位。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>169</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>124.2</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5517": {
        "title": "[Python] L1-028. 判断素数-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:31:53+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">本题的目标很简单，就是判断一个给定的正整数是否素数。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入在第一行给出一个正整数N（&lt;=10），随后N行，每行给出一个小于231的需要判断的正整数。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">对每个需要判断的正整数，如果它是素数，则在一行中输出“Yes”，否则输出“No”。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">2</span></strong><br><strong><span style=\"color: #33cccc;\">11</span></strong><br><strong><span style=\"color: #33cccc;\">111</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">Yes</span></strong><br><strong><span style=\"color: #33cccc;\">No</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5499": {
        "title": "[Python] L1-026. I Love GPLT-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T19:30:09+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>这道超级简单的题目没有任何输入。</strong></span><br><span style=\"color: #33cccc;\"><strong>你只需要把这句很重要的话 —— “I Love GPLT”——竖着输出就可以了。</strong></span><br><span style=\"color: #33cccc;\"><strong>所谓“竖着输出”，是指每个字符占一行（包括空格），即每行只能有1个字符和回车。</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5497": {
        "title": "[Python] L1-025. 正整数A+B-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:23:45+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>本题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</strong></span><br><span style=\"color: #33cccc;\"><strong>注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>如果输入的确是两个正整数，则按格式“A + B = 和”输出。如果某个输入不合要求，则在相应位置输出“?”，显然此时和也是“?”。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>123 456</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例1：</strong></span><br><span style=\"color: #33cccc;\"><strong>123 + 456 = 579</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>22. 18</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例2：</strong></span><br><span style=\"color: #33cccc;\"><strong>? + 18 = ?</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>-100 blabla bla…33</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例3：</strong></span><br><span style=\"color: #33cccc;\"><strong>? + ? = ?</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5495": {
        "title": "[Python] L1-024. 后天-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:20:17+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-024. 后天</strong></span><br><strong><span style=\"color: #33cccc;\">如果今天是星期三，后天就是星期五；如果今天是星期六，后天就是星期一。我们用数字1到7对应星期一到星期日。给定某一天，请你输出那天的“后天”是星期几。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入第一行给出一个正整数D（1 &lt;= D &lt;=7），代表星期里的某一天。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">在一行中输出D天的后天是星期几。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">3</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">5</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5493": {
        "title": "[Python] L1-023. 输出GPLT-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:18:44+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-023. 输出GPLT</strong></span><br><span style=\"color: #33cccc;\"><strong>给定一个长度不超过10000的、仅由英文字母构成的字符串。请将字符重新调整顺序，按“GPLTGPLT….”这样的顺序输出，并忽略其它字符。当然，四种字符（不区分大小写）的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按GPLT的顺序打印，直到所有字符都被输出。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出一个长度不超过10000的、仅由英文字母构成的非空字符串。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>pcTclnGloRgLrtLhgljkLhGFauPewSKgt</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>GPLTGPLTGLTGLGLL</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5490": {
        "title": "[Python] L1-022. 奇偶分家-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:17:39+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-022. 奇偶分家</strong></span><br><span style=\"color: #33cccc;\"><strong>给定N个正整数，请统计奇数和偶数各有多少个？</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入第一行给出一个正整N（&lt;= 1000）；第2行给出N个正整数，以空格分隔。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中先后输出奇数的个数、偶数的个数。中间以1个空格分隔。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>9</strong></span><br><span style=\"color: #33cccc;\"><strong>88 74 101 26 15 0 34 22 77</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>3 6</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5487": {
        "title": "[Python] L1-021. 重要的话说三遍-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:13:07+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>这道超级简单的题目没有任何输入。<br></strong></span><span style=\"color: #33cccc;\"><strong>你只需要把这句很重要的话 —— “I’m gonna WIN!”’——连续输出三遍就可以了。<br></strong></span><span style=\"color: #33cccc;\"><strong>注意每遍占一行，除了每行的回车不能有任何多余字符。</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5484": {
        "title": "[Python] L1-019. 谁先倒-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:09:58+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</span></strong><br><strong><span style=\"color: #33cccc;\">下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数N（&lt;=100），随后N行，每行给出一轮划拳的记录，格式为：</span></strong><br><strong><span style=\"color: #33cccc;\">甲喊 甲划 乙喊 乙划</span></strong><br><strong><span style=\"color: #33cccc;\">其中“喊”是喊出的数字，“划”是划出的数字，均为不超过100的正整数（两只手一起划）。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">在第一行中输出先倒下的那个人：A代表甲，B代表乙。第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">1 1</span></strong><br><strong><span style=\"color: #33cccc;\">6</span></strong><br><strong><span style=\"color: #33cccc;\">8 10 9 12</span></strong><br><strong><span style=\"color: #33cccc;\">5 10 5 10</span></strong><br><strong><span style=\"color: #33cccc;\">3 8 5 12</span></strong><br><strong><span style=\"color: #33cccc;\">12 18 1 13</span></strong><br><strong><span style=\"color: #33cccc;\">4 16 12 15</span></strong><br><strong><span style=\"color: #33cccc;\">15 1 1 16</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">A</span></strong><br><strong><span style=\"color: #33cccc;\">1</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5482": {
        "title": "[Python] L1-018. 大笨钟-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:06:03+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-018. 大笨钟</strong></span><br><strong><span style=\"color: #33cccc;\">微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。不过由于笨钟自己作息也不是很规律，所以敲钟并不定时。一般敲钟的点数是根据敲钟时间而定的，如果正好在某个整点敲，那么“当”数就等于那个整点数；如果过了整点，就敲下一个整点数。另外，虽然一天有24小时，钟却是只在后半天敲1~12下。例如在23:00敲钟，就是“当当当当当当当当当当当”，而到了23:01就会是“当当当当当当当当当当当当”。在午夜00:00到中午12:00期间（端点时间包括在内），笨钟是不敲的。</span></strong><br><strong><span style=\"color: #33cccc;\">下面就请你写个程序，根据当前时间替大笨钟敲钟。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入第一行按照“hh:mm”的格式给出当前时间。其中hh是小时，在00到23之间；mm是分钟，在00到59之间。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">根据当前时间替大笨钟敲钟，即在一行中输出相应数量个“Dang”。如果不是敲钟期，则输出：</span></strong><br><strong><span style=\"color: #33cccc;\">Only hh:mm. Too early to Dang.</span></strong><br><strong><span style=\"color: #33cccc;\">其中“hh:mm”是输入的时间。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例1：</strong></span><br><strong><span style=\"color: #33cccc;\">19:05</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例1：</strong></span><br><strong><span style=\"color: #33cccc;\">DangDangDangDangDangDangDangDang</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例2：</strong></span><br><strong><span style=\"color: #33cccc;\">07:05</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例2：</strong></span><br><strong><span style=\"color: #33cccc;\">Only 07:05. Too early to Dang.</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5480": {
        "title": "[Python] L1-017. 到底有多二-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:02:42+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">一个整数“犯二的程度”定义为该数字中包含2的个数与其位数的比值。如果这个数是负数，则程度增加0.5倍;如果还是个偶数，则再增加1倍。</span></strong><br><strong><span style=\"color: #33cccc;\">例如数字“-13142223336”是个11位数，其中有3个2，并且是负数，也是偶数，则它的犯二程度计算为：3/11*1.5*2*100%，约为81.82%。本题就请你计算一个给定整数到底有多二。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入第一行给出一个不超过50位的整数N。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">在一行中输出N犯二的程度，保留小数点后两位。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">-13142223336</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">81.82%</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5478": {
        "title": "[Python] L1-015. 跟奥巴马一起画方块-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T17:01:00+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-015. 跟奥巴马一起画方块</strong></span><br><strong><span style=\"color: #33cccc;\">美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</span></strong><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入在一行中给出正方形边长N（3&lt;=N&lt;=21）和组成正方形边的某种字符C，间隔一个空格。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">10 a</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">aaaaaaaaaa</span></strong><br><strong><span style=\"color: #33cccc;\">aaaaaaaaaa</span></strong><br><strong><span style=\"color: #33cccc;\">aaaaaaaaaa</span></strong><br><strong><span style=\"color: #33cccc;\">aaaaaaaaaa</span></strong><br><strong><span style=\"color: #33cccc;\">aaaaaaaaaa</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5473": {
        "title": "[Python] L1-014. 简单题-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:59:08+00:00",
        "content": "<p><strong><span style=\"color: #33cccc;\">这次真的没骗你 —— 这道超级简单的题目没有任何输入。</span></strong></p><p><strong><span style=\"color: #33cccc;\">你只需要在一行中输出事实：“This is a simple problem.”就可以了。</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p> </p>"
    },
    "5471": {
        "title": "[Python] L1-013. 计算阶乘和-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:57:40+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-013. 计算阶乘和</strong></span><br><span style=\"color: #33cccc;\"><strong>对于给定的正整数N，需要你计算 S = 1! + 2! + 3! + … + N!。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出一个不超过10的正整数N。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出S的值。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>3</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>9</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5466": {
        "title": "[Python] L1-012. 计算指数-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:53:46+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-012. 计算指数</strong></span><br><span style=\"color: #33cccc;\"><strong>真的没骗你，这道才是简单题 —— 对任意给定的不超过10的正整数n，要求你输出2n。不难吧？</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出一个不超过10的正整数n。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中按照格式“2^n = 计算结果”输出2n的值。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>5</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>2^5 = 32</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5463": {
        "title": "[Python] L1-011. A-B-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:29:36+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>本题要求你计算A-B。不过麻烦的是，A和B都是字符串 —— 即从字符串A中把字符串B所包含的字符全删掉，剩下的字符组成的就是字符串A-B。</strong></span><br><span style=\"color: #3366ff;\"><strong> 输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong> 输入在2行中先后给出字符串A和B。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</strong></span><br><span style=\"color: #3366ff;\"><strong> 输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong> 在一行中打印出A-B的结果字符串。</strong></span><br><span style=\"color: #3366ff;\"><strong> 输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong> I love GPLT! It’s a fun game!</strong></span><br><span style=\"color: #33cccc;\"><strong> aeiou</strong></span><br><span style=\"color: #3366ff;\"><strong> 输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong> I lv GPLT! It’s fn gm!</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5455": {
        "title": "[Python] L1-010. 比较大小-PAT团体程序设计天梯赛",
        "time": "2018-08-28T16:23:54+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><strong><span style=\"color: #33cccc;\">输入在一行中给出3个整数，其间以空格分隔。</span></strong><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><strong><span style=\"color: #33cccc;\">在一行中将3个整数从小到大输出，其间以“-&gt;”相连。</span></strong><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><strong><span style=\"color: #33cccc;\">4 2 8</span></strong><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><strong><span style=\"color: #33cccc;\">2-&gt;4-&gt;8</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5447": {
        "title": "[Python] L1-008. 求整数段和-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:19:41+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-008. 求整数段和</strong></span><br><span style=\"color: #33cccc;\"><strong>给定两个整数A和B，输出从A到B的所有整数以及这些数的和。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出2个整数A和B，其中-100&lt;=A&lt;=B&lt;=100，其间以空格分隔。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>首先顺序输出从A到B的所有整数，每5个数字占一行，每个数字占5个字符宽度，向右对齐。最后在一行中输出全部数字的和。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>-3 8</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong> -3 -2 -1 0 1</strong></span><br><span style=\"color: #33cccc;\"><strong> 2 3 4 5 6</strong></span><br><span style=\"color: #33cccc;\"><strong> 7 8</strong></span><br><span style=\"color: #33cccc;\"><strong>Sum = 30</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5445": {
        "title": "[Python] L1-007. 念数字-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:18:16+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-007. 念数字</strong></span><br><span style=\"color: #33cccc;\"><strong>输入一个整数，输出每个数字对应的拼音。当整数为负数时，先输出“fu”字。十个数字对应的拼音如下：</strong></span><br><span style=\"color: #33cccc;\"><strong>0: ling</strong></span><br><span style=\"color: #33cccc;\"><strong>1: yi</strong></span><br><span style=\"color: #33cccc;\"><strong>2: er</strong></span><br><span style=\"color: #33cccc;\"><strong>3: san</strong></span><br><span style=\"color: #33cccc;\"><strong>4: si</strong></span><br><span style=\"color: #33cccc;\"><strong>5: wu</strong></span><br><span style=\"color: #33cccc;\"><strong>6: liu</strong></span><br><span style=\"color: #33cccc;\"><strong>7: qi</strong></span><br><span style=\"color: #33cccc;\"><strong>8: ba</strong></span><br><span style=\"color: #33cccc;\"><strong>9: jiu</strong></span><br><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>输入在一行中给出一个整数，如： 1234 。</strong></span><br><span style=\"color: #33cccc;\"><strong>提示：整数包括负数、零和正数。</strong></span><br><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span><br><span style=\"color: #33cccc;\"><strong>在一行中输出这个整数对应的拼音，每个数字的拼音之间用空格分开，行末没有最后的空格。如 yi er san si。</strong></span><br><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>-600</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>fu liu ling ling</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5441": {
        "title": "[Python] L1-005. 考试座位号-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:16:38+00:00",
        "content": "<p><strong><span style=\"color: #3366ff;\">L1-005. 考试座位号</span></strong><br><strong><span style=\"color: #33cccc;\">每个PAT考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</span></strong></p><p><strong><span style=\"color: #3366ff;\">输入格式：</span></strong></p><p><strong><span style=\"color: #33cccc;\">输入第一行给出一个正整数N（&lt;=1000），随后N行，每行给出一个考生的信息：“准考证号 试机座位号 考试座位号”。其中准考证号由14位数字组成，座位从1到N编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</span></strong></p><p><strong><span style=\"color: #33cccc;\">考生信息之后，给出一个正整数M（&lt;=N），随后一行中给出M个待查询的试机座位号码，以空格分隔。</span></strong></p><p><strong><span style=\"color: #3366ff;\">输出格式：</span></strong></p><p><strong><span style=\"color: #33cccc;\">对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用1个空格分隔。</span></strong></p><p><strong><span style=\"color: #3366ff;\">输入样例：</span></strong><br><strong><span style=\"color: #33cccc;\">4</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912233 2 4</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912119 4 1</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912126 1 3</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912002 3 2</span></strong><br><strong><span style=\"color: #33cccc;\">2</span></strong><br><strong><span style=\"color: #33cccc;\">3 4</span></strong><br><strong><span style=\"color: #3366ff;\">输出样例：</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912002 2</span></strong><br><strong><span style=\"color: #33cccc;\">10120150912119 1</span></strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p> </p>"
    },
    "5437": {
        "title": "[Python] L1-004. 计算摄氏温度-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:13:14+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>给定一个华氏温度F，本题要求编写程序，计算对应的摄氏温度C。计算公式：C = 5*(F-32)/9。题目保证输入与输出均在整型范围内。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>输入在一行中给出一个华氏温度。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>在一行中按照格式“Celsius = C”输出对应的摄氏温度C的整数值。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>150</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>Celsius = 65</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5434": {
        "title": "[Python] L1-003. 个位数统计-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:03:41+00:00",
        "content": "<p><span style=\"color: #3366ff;\"><strong>L1-003. 个位数统计</strong></span><br><span style=\"color: #33cccc;\"><strong>给定一个k位整数N = dk-1*10k-1 + … + d1*101 + d0 (0&lt;=di&lt;=9, i=0,…,k-1, dk-1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定N = 100311，则有2个0，3个1，和1个3。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>每个输入包含1个测试用例，即一个不超过1000位的正整数N。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：<br></strong></span><span style=\"color: #33cccc;\"><strong>对N中每一种不同的个位数字，以D:M的格式在一行中输出该位数字D及其在N中出现的次数M。要求按D的升序输出。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>100311</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>0:2</strong></span><br><span style=\"color: #33cccc;\"><strong>1:3</strong></span><br><span style=\"color: #33cccc;\"><strong>3:1</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5431": {
        "title": "[Python] L1-002. 打印沙漏-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T16:00:54+00:00",
        "content": "<p><span style=\"color: #33cccc;\"><strong>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</strong></span></p><p><span style=\"color: #33cccc;\"><strong>*****</strong></span><br><span style=\"color: #33cccc;\"><strong>***</strong></span><br><span style=\"color: #33cccc;\"><strong>*</strong></span><br><span style=\"color: #33cccc;\"><strong>***</strong></span><br><span style=\"color: #33cccc;\"><strong>*****</strong></span><br><span style=\"color: #33cccc;\"><strong>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</strong></span></p><p><span style=\"color: #33cccc;\"><strong>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入格式：</strong></span></p><p><span style=\"color: #33cccc;\"><strong>输入在一行给出1个正整数N（&lt;=1000）和一个符号，中间以空格分隔。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输出格式：</strong></span></p><p><span style=\"color: #33cccc;\"><strong>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</strong></span></p><p><span style=\"color: #3366ff;\"><strong>输入样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>19 *</strong></span><br><span style=\"color: #3366ff;\"><strong>输出样例：</strong></span><br><span style=\"color: #33cccc;\"><strong>*****</strong></span><br><span style=\"color: #33cccc;\"><strong>***</strong></span><br><span style=\"color: #33cccc;\"><strong>*</strong></span><br><span style=\"color: #33cccc;\"><strong>***</strong></span><br><span style=\"color: #33cccc;\"><strong>*****</strong></span><br><span style=\"color: #33cccc;\"><strong>2</strong></span></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5419": {
        "title": "[Python] L1-001. Hello World-PAT团体程序设计天梯赛GPLT",
        "time": "2018-08-28T15:53:29+00:00",
        "content": "<p><strong>这道超级简单的题目没有任何输入。</strong></p><p><strong>你只需要在一行中输出著名短句“Hello World!”就可以了。</strong></p><p><span style=\"color: #ff99cc;\"><strong>PS：感谢github用户<a style=\"color: #ff99cc;\" href=\"https://github.com/zhuzihao-hz\">@zhuzihao-hz</a>提供的pull request～</strong></span></p><p></p>"
    },
    "5257": {
        "title": "[swift] LeetCode 832. Flipping an Image",
        "time": "2018-08-25T16:41:04+00:00",
        "content": "<p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.</p><p>To flip an image horizontally means that each row of the image is reversed.  For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.</p><p>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p><p><strong>Example 1:</strong></p><p>Input: [[1,1,0],[1,0,1],[0,0,0]]<br>Output: [[1,0,0],[0,1,0],[1,1,1]]<br>Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].<br>Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</p><p><strong>Example 2:</strong></p><p>Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]<br>Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]<br>Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].<br>Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p><p><strong>Notes:</strong></p><p>1 &lt;= A.length = A[0].length &lt;= 20<br>0 &lt;= A[i][j] &lt;= 1</p><p></p>"
    },
    "5255": {
        "title": "[swift] LeetCode 804. Unique Morse Code Words",
        "time": "2018-08-25T16:39:30+00:00",
        "content": "<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>\"a\"</code>maps to <code>\".-\"</code>, <code>\"b\"</code> maps to <code>\"-...\"</code>, <code>\"c\"</code> maps to <code>\"-.-.\"</code>, and so on.</p><p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p><p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, “cab” can be written as “-.-.-….-“, (which is the concatenation “-.-.” + “-…” + “.-“). We’ll call such a concatenation, the transformation of a word.</p><p>Return the number of different transformations among all words we have.</p><p><strong>Note:</strong></p><p></p><p></p>"
    },
    "5249": {
        "title": "[swift] LeetCode 709. To Lower Case",
        "time": "2018-08-25T16:33:45+00:00",
        "content": "<p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p>"
    },
    "5247": {
        "title": "[swift] LeetCode 771. Jewels and Stones",
        "time": "2018-08-25T16:32:07+00:00",
        "content": "<p>You are given strings J representing the types of stones that are jewels, and S representing the stones you have. Each character in S is a type of stone you have. You want to know how many of the stones you have are also jewels.</p><p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p><p>Example 1:</p><p>Input: J = “aA”, S = “aAAbbbb”<br>Output: 3<br>Example 2:</p><p>Input: J = “z”, S = “ZZ”<br>Output: 0<br>Note:</p><p>S and J will consist of letters and have length at most 50.<br>The characters in J are distinct.</p><p></p>"
    },
    "5244": {
        "title": "[swift] LeetCode 695. Max Area of Island",
        "time": "2018-08-25T16:30:52+00:00",
        "content": "<p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p><p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p><p>Example 1:<br>[[0,0,1,0,0,0,0,1,0,0,0,0,0],<br>[0,0,0,0,0,0,0,1,1,1,0,0,0],<br>[0,1,1,0,1,0,0,0,0,0,0,0,0],<br>[0,1,0,0,1,1,0,0,1,0,1,0,0],<br>[0,1,0,0,1,1,0,0,1,1,1,0,0],<br>[0,0,0,0,0,0,0,0,0,0,1,0,0],<br>[0,0,0,0,0,0,0,1,1,1,0,0,0],<br>[0,0,0,0,0,0,0,1,1,0,0,0,0]]<br>Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.<br>Example 2:<br>[[0,0,0,0,0,0,0,0]]<br>Given the above grid, return 0.<br>Note: The length of each dimension in the given grid does not exceed 50.</p><p></p>"
    },
    "5242": {
        "title": "[swift] LeetCode 657. Judge Route Circle",
        "time": "2018-08-25T16:30:13+00:00",
        "content": "<p>Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.</p><p>The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.</p><p>Example 1:<br>Input: “UD”<br>Output: true<br>Example 2:<br>Input: “LL”<br>Output: false</p><p></p>"
    },
    "5240": {
        "title": "[swift] LeetCode 617. Merge Two Binary Trees",
        "time": "2018-08-25T16:29:17+00:00",
        "content": "<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p><p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p><p><b>Example 1:</b></p><p><b>Note:</b> The merging process must start from the root nodes of both trees.</p><p></p>"
    },
    "5236": {
        "title": "[swift] LeetCode 581. Shortest Unsorted Continuous Subarray",
        "time": "2018-08-25T16:28:16+00:00",
        "content": "<p>Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.</p><p>You need to find the shortest such subarray and output its length.</p><p>Example 1:<br>Input: [2, 6, 4, 8, 10, 9, 15]<br>Output: 5<br>Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.<br>Note:<br>Then length of the input array is in range [1, 10,000].<br>The input array may contain duplicates, so ascending order here means &lt;=.</p><p></p>"
    },
    "5234": {
        "title": "[swift] LeetCode 572. Subtree of Another Tree",
        "time": "2018-08-25T16:27:30+00:00",
        "content": "<p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.</p><p>Example 1:<br>Given tree s:</p><p>3<br>/ \\<br>4 5<br>/ \\<br>1 2<br>Given tree t:<br>4<br>/ \\<br>1 2<br>Return true, because t has the same structure and node values with a subtree of s.<br>Example 2:<br>Given tree s:</p><p>3<br>/ \\<br>4 5<br>/ \\<br>1 2<br>/<br>0<br>Given tree t:<br>4<br>/ \\<br>1 2<br>Return false.</p><p></p>"
    },
    "5231": {
        "title": "[swift] LeetCode 543. Diameter of Binary Tree",
        "time": "2018-08-25T16:26:40+00:00",
        "content": "<p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p><p>Example:<br>Given a binary tree<br>1<br>/ \\<br>2 3<br>/ \\<br>4 5<br>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p>Note: The length of path between two nodes is represented by the number of edges between them.</p><p> </p>"
    }
}