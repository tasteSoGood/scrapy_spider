<p><span style="color: #33cccc;"><strong>今天刚考完，大概95分的样子，有几个填空坑坑哒。。其他还是蛮简单的都复习到了~用<span style="color: #ff9900;">颜色</span>标注了一下本次考试考到的知识点：<br><span style="color: #ff9900;">模块的内聚是何含义？</span></strong></span><br><span style="color: #ff9900;"><strong>一个模块内各个元素彼此结合的紧密程度。</strong></span></p><p><span style="color: #ff9900;"><strong>软件工程方法学的3要素是什么？</strong></span><br><span style="color: #ff9900;"><strong>方法、工具、过程</strong></span></p><p><span style="color: #ff9900;"><strong>软件生命周期的阶段如何还分，每个阶段的主要任务是什么？</strong></span><br><span style="color: #ff9900;"><strong>软件定义（问题定义、可行性研究、需求分析）</strong></span><br><span style="color: #ff9900;"><strong>问题定义：明白要解决的问题是什么</strong></span><br><span style="color: #ff9900;"><strong>可行性研究：探索这个问题是否值得去解，是否有可行的解决办法</strong></span><br><span style="color: #ff9900;"><strong>需求分析：确定系统必须具备哪些功能</strong></span></p><p><span style="color: #ff9900;"><strong>软件开发（总体设计、详细设计、编码和单元测试、综合测试）</strong></span><br><span style="color: #ff9900;"><strong>总体设计：设计出实现目标系统的几种可能方案，确定程序由哪些模块组成以及模块间的关系</strong></span><br><span style="color: #ff9900;"><strong>详细设计：设计出程序的详细规格说明</strong></span><br><span style="color: #ff9900;"><strong>编码和单元测试：写出正确的容易理解、容易维护的程序模块</strong></span><br><span style="color: #ff9900;"><strong>综合测试：通过各种类型的测试和调试使软件达到预定的要求</strong></span></p><p><span style="color: #ff9900;"><strong>软件维护（软件维护）</strong></span><br><span style="color: #ff9900;"><strong>通过各种必要的维护活动使系统持久地满足用户的需要</strong></span></p><p><span style="color: #ff9900;"><strong>可行性研究的实质是什么？</strong></span><br><span style="color: #ff9900;"><strong>一次大大压缩简化了的系统分析和设计的过程，也就是在较高层次上以较抽象的方式进行的系统分析和设计过程</strong></span></p><p><span style="color: #ff9900;"><strong>结构化程序设计有哪几种基本结构，有何特点？有何要求？</strong></span><br><span style="color: #ff9900;"><strong>基本结构：顺序、选择、循环</strong></span><br><span style="color: #33cccc;"><strong>特点：任意基本结构都具有唯一入口和唯一出口</strong></span><br><span style="color: #33cccc;"><strong>要求：尽可能少用go to语句，最好在检测出错误时采使用go to语句，而且应该总是使用前向go to语句</strong></span></p><p><span style="color: #ff9900;"><strong>软件维护的分类，及每种维护的含义？</strong></span><br><span style="color: #ff9900;"><strong>改正性维护：发现系统中的错误而引起的维护</strong></span><br><span style="color: #ff9900;"><strong>适应性维护：为了适应外界环境的变化而增加或者修改功能的维护工作</strong></span><br><span style="color: #ff9900;"><strong>完善性维护：为了完善系统功能而增加新功能的维护工作</strong></span><br><span style="color: #ff9900;"><strong>预防性维护：对尚能正常运行但可能要发生变化的部分采取的预防措施</strong></span></p><p><span style="color: #ff9900;"><strong>软件测试和软件调试的目的是什么？</strong></span><br><span style="color: #ff9900;"><strong>软件测试的目的：破坏已经建造好的软件系统，竭力证明程序中有错误，不能按照预定要求工作。尽可能多地发现并排除软件中潜在的错误。 软件调试的目的：找出产生症状的原因，以便改正错误。</strong></span></p><p><span style="color: #33cccc;"><strong>什么是软件配置管理？</strong></span><br><span style="color: #33cccc;"><strong>在软件的整个生命周期内管理变化的一组活动，这组活动用来标识变化、控制变化、确保适当地实现了变化、向需要知道这类信息的人报告变化</strong></span></p><p><span style="color: #ff9900;"><strong>什么是软件配置项？</strong></span><br><span style="color: #ff9900;"><strong>分为3类：</strong></span><br><span style="color: #ff9900;"><strong>计算机程序</strong></span><br><span style="color: #ff9900;"><strong>描述计算机程序的文档</strong></span><br><span style="color: #ff9900;"><strong>数据</strong></span></p><p><span style="color: #33cccc;"><strong>数据流图有何用途、有哪几种图形元素？</strong></span><br><span style="color: #33cccc;"><strong>两个用途：1.信息交流的工具 2.分析和设计的工具 元素：4个基本符号。1.正方形：表示源点或终点 2.圆角矩形：代表变换数据的处理 3.开口矩形：数据存储 4.箭头：数据流</strong></span></p><p><span style="color: #ff9900;"><strong>什么是ER图、有哪几种图形元素、有何用途？</strong></span><br><span style="color: #ff9900;"><strong>实体-联系图。</strong></span><br><span style="color: #ff9900;"><strong>矩形框表示实体，菱形框表示关系，椭圆形表示属性。</strong></span><br><span style="color: #ff9900;"><strong>用途：用来描述现实世界的概念模型。</strong></span></p><p><span style="color: #33cccc;"><strong>数据字典主要用途是什么？</strong></span><br><span style="color: #33cccc;"><strong>作为分析阶段的工具。在数据字典中建立的一组严密一致的定义很有助于改进分析员和用户之间的通信，因此能消除许多可能的误解。</strong></span></p><p><span style="color: #33cccc;"><strong>什么是白盒测试、什么是黑盒测试，白盒测试有哪些测试方法、黑<span style="color: #ff9900;">盒测试有哪些测试方法？</span></strong></span><br><span style="color: #ff9900;"><strong>白盒测试：按照程序内部的逻辑测试程序，检测程序中的主要执行通路是否都能按预定要求正确工作</strong></span><br><span style="color: #ff9900;"><strong>黑盒测试：在程序接口进行的测试，只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接收输入数据并产生正确的输出信息，程序运行过程中能否保持外部信息的完整性。</strong></span><br><span style="color: #ff9900;"><strong>白盒测试的方法：逻辑覆盖、控制结构测试</strong></span><br><span style="color: #ff9900;"><strong>黑盒测试的方法：等价划分、边界值分析、错误推测</strong></span></p><p><span style="color: #ff9900;"><strong>什么是等价类划分方法，什么是边界值分析方法？</strong></span><br><span style="color: #ff9900;"><strong>等价划分方法：把程序的输入域划分成若干个数据类，据此导出测试用例。</strong></span><br><span style="color: #33cccc;"><strong>边界值分析方法：通过输入等价类和输出等价类的边界进行测试的一种黑盒测试方法，通常是对等价类划分的一种补充，选取的测试数据应该刚好等于、刚好小于和刚好大于边界值</strong></span></p><p><span style="color: #ff9900;"><strong>耦合有哪些类别，内聚有哪些类型，各是何含义？</strong></span><br><span style="color: #ff9900;"><strong>耦合：</strong></span><br><span style="color: #ff9900;"><strong>非直接耦合：相互之间没有数据交换</strong></span><br><span style="color: #ff9900;"><strong>数据耦合：两个模块通过参数交换信息</strong></span><br><span style="color: #ff9900;"><strong>控制耦合：两个模块通过参数交换控制信息，这个信息会影响另一个模块</strong></span><br><span style="color: #33cccc;"><strong><span style="color: #ff9900;">特征耦合：当把整个数据结构作为参数传递而被调用的模块只需要其中一部分数据元素时</span></strong></span><br><span style="color: #ff9900;"><strong>公共数据环境耦合：多个模块共用一个数据环境</strong></span><br><span style="color: #ff9900;"><strong>内容耦合：一个模块访问另一个模块里面的数据，一个模块不经过正常入口进入另一个模块，一个模块有多个入口，两个模块之间有代码重叠</strong></span><br><span style="color: #ff9900;"><strong>内聚：</strong></span><br><span style="color: #ff9900;"><strong>功能内聚：里面的元素为了共同实现同一个功能</strong></span><br><span style="color: #ff9900;"><strong>顺序内聚：模块内两个步骤按照顺序执行，共同为了完成某个功能</strong></span><br><span style="color: #ff9900;"><strong>通信内聚：使用相同的输入数据，或者产生相同的输出数据</strong></span><br><span style="color: #ff9900;"><strong>过程内聚：一个模块内的处理元素是相关的，比如两个数据公用同一个循环或者判定条件，比如过程中用同一个公式执行</strong></span><br><span style="color: #ff9900;"><strong>时间内聚：只是因为他们在同一个时间执行才把它们放到一起，比如共同用来初始化的一些函数，或者紧急处理模块</strong></span><br><span style="color: #ff9900;"><strong>逻辑内聚：一个模块完成的任务在逻辑上属于相同或相似的一类</strong></span><br><span style="color: #ff9900;"><strong>偶然内聚：一个模块完成一组任务，但是这些任务之间没有太大关系，关系是很松散的。</strong></span></p><p><span style="color: #ff9900;"><strong>需求分析阶段应该得到什么文档？</strong></span><br><span style="color: #ff9900;"><strong>软件需求规格说明书</strong></span></p><p><span style="color: #33cccc;"><strong>软件生命周期模型有哪些？各有何特点？</strong></span><br><span style="color: #33cccc;"><strong>瀑布模型：阶段间具有顺序行和依赖性、推迟实现、质量保证</strong></span><br><span style="color: #ff9900;"><strong>快速原型模型：快速建立起能够在计算机上运行的程序</strong></span><br><span style="color: #33cccc;"><strong>增量模型：把软件产品作为一系列的增量构件来设计、编码、继承和测试</strong></span><br><span style="color: #ff9900;"><strong>螺旋模型：是风险驱动的，在每个阶段之前都增加了风险分析过程</strong></span><br><span style="color: #33cccc;"><strong>喷泉模型：具有面向对象软件开发过程迭代和无缝的特性</strong></span></p><p><span style="color: #33cccc;"><strong>判定表和判定树有何特点？用于何种场合？如何使用？</strong></span><br><span style="color: #ff9900;"><strong>判定表：能够清晰地表示复杂的条件组合与应做动作之间的对应关系。</strong></span><br><span style="color: #33cccc;"><strong> 场合：用于算法中包含多重嵌套的条件选择时。</strong></span><br><span style="color: #33cccc;"><strong>判定树：也能够清晰地表示复杂的条件组合与应做动作之间的对应关系，优点在于他的形式简单，不需要任何说明，就能一眼看出其含义，易于掌握和使用。</strong></span></p><p><span style="color: #ff9900;"><strong>结构化程序设计对goto 语句有何要求？</strong></span><br><span style="color: #ff9900;"><strong>要求：尽可能少用go to语句，最好在检测出错误时采使用go to语句，而且应该总是使用前向go to语句</strong></span></p><p><span style="color: #33cccc;"><strong>设计数据流图时，分层的原则是什么？</strong></span><br><span style="color: #33cccc;"><strong>自顶向下，逐层分解</strong></span></p><p><span style="color: #ff9900;"><strong>估算软件项目成本的模型有哪些？</strong></span><br><span style="color: #ff9900;"><strong>代码行技术、功能点技术、静态单变量模型、动态多变量模型、COCOMO2模型</strong></span></p><p><span style="color: #ff9900;"><strong>软件危机是什么？软件工程的定义是什么？二者有何关系？</strong></span><br><span style="color: #ff9900;"><strong>软件危机：在计算机软件的开发和维护过程中所遇到的一系列严重问题</strong></span><br><span style="color: #33cccc;"><strong>软件工程：指导计算机软件开发和维护的一门工程学科。采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它，这就是软件工程。</strong></span><br><span style="color: #33cccc;"><strong>关系：软件工程是从技术和管理两个方面来研究如何更好地开发和维护计算机软件，从源头上消除软件危机。</strong></span></p><p><span style="color: #33cccc;"><strong>软件结构图如何理解？</strong></span><br><span style="color: #33cccc;"><strong>是软件结构设计另一个有力工具，是描绘软件结构的图形工具，表明了一个模块调用了哪些模块。</strong></span></p><p><span style="color: #ff9900;"><strong>数据流图中，信息流可分为哪两种类型，如何区分？</strong></span><br><span style="color: #ff9900;"><strong>信息流分为：交换流和事务流。</strong></span><br><span style="color: #ff9900;"><strong>交换流：有输出流、交换流、输入流</strong></span><br><span style="color: #ff9900;"><strong>事务流：以事务为中心，可能有多个输出</strong></span></p><p><span style="color: #ff9900;"><strong>软件结构图中对深度、宽度、扇入及扇出有何要求？</strong></span><br><span style="color: #ff9900;"><strong>深度、宽度、扇入、扇出都应该适当。一个好的典型系统平均扇出通常是3或4。</strong></span></p><p><span style="color: #ff9900;"><strong>什么是CAD，CAM,CAI,CASE?</strong></span><br><span style="color: #ff9900;"><strong>CAD——计算机辅助设计</strong></span><br><span style="color: #ff9900;"><strong>CAM——计算机辅助制造</strong></span><br><span style="color: #ff9900;"><strong>CAI——计算机辅助教学</strong></span><br><span style="color: #ff9900;"><strong>CASE——计算机辅助软件工程</strong></span></p><p><span style="color: #ff9900;"><strong>JACKSON方法有何特点？有何用途？</strong></span><br><span style="color: #ff9900;"><strong>特点：分析输入输出数据的逻辑结构、列出所有的操作和条件、用伪代码表示程序</strong></span><br><span style="color: #ff9900;"><strong>用途：面向数据结构的设计方法，在设计比较简单的数据处理系统时特别方便</strong></span></p><p><span style="color: #ff9900;"><strong>什么是驱动模块、什么是存根模块？有何用途？</strong></span><br><span style="color: #ff9900;"><strong>驱动模块：用来模拟被测试模块的上一级模块，相当于被测模块的主程序。它接收数据，将相关数据传送给被测试模块，启动被测模块，并打印出相应的结果</strong></span><br><span style="color: #ff9900;"><strong>存根模块：代替被测试的模块所调用的模块，称为虚拟子程序，使用被他代替的模块的接口，做少量的数据操作并输出，然后把控制归还给调用它的模块</strong></span></p><p><span style="color: #ff9900;"><strong>如何度量软件的规模？</strong></span><br><span style="color: #ff9900;"><strong>代码行技术：依据以往开发类似产品的经验和历史数据，估算实现一个功能所需要的源程序行数</strong></span><br><span style="color: #ff9900;"><strong>功能点技术：依据对软件信息域特性和软件复杂性的评估结果，估算软件规模。</strong></span></p><p><span style="color: #ff9900;"><strong>可行性研究包含哪几方面的工作？</strong></span><br><span style="color: #ff9900;"><strong>技术可行性、经济可行性、操作可行性</strong></span></p><p><span style="color: #ff9900;"><strong>CMM包含哪几个等级？</strong></span><br><span style="color: #ff9900;"><strong>CMM——软件能力成熟度模型，从无序到有序分为五个等级：1. 初始级 2.可重复级 3.已定义级 4.已管理级 5.优化级</strong></span></p><p><span style="color: #ff9900;"><strong>投资回收期如何计算？</strong></span><br><span style="color: #ff9900;"><strong>计算公式：</strong></span><br><span style="color: #ff9900;"><strong>投资回收期 = [累计净现金流量出现正值年数] – 1 + [上年累计净现金流量绝对值 / 当年净现金流量]</strong></span></p><p><span style="color: #ff9900;"><strong>什么是结构化设计？有何用途？</strong></span><br><span style="color: #ff9900;"><strong>是一种面向数据流的设计方法，目的在于确定软件的结构。</strong></span><br><span style="color: #ff9900;"><strong>用途：是程序的结构尽可能反映要解决的问题的结构。</strong></span></p><p><span style="color: #33cccc;"><strong>需求分析阶段要使用哪三种类型的模型？</strong></span><br><span style="color: #33cccc;"><strong>功能模型：DFD</strong></span><br><span style="color: #33cccc;"><strong>数据模型：E-R</strong></span><br><span style="color: #33cccc;"><strong>行为模型：状态转换图</strong></span></p><p><span style="color: #33cccc;"><strong>集成测试有哪几种策略？</strong></span><br><span style="color: #33cccc;"><strong>2种：自顶向下，自底向上</strong></span></p><p><span style="color: #ff9900;"><strong>软件测试有哪几个步骤？与软件各开发阶段有何关系？</strong></span><br><span style="color: #ff9900;"><strong>步骤：1. 模块测试 2. 子系统测试 3.系统测试 4. 验收测试 5.平行运行</strong></span><br><span style="color: #ff9900;"><strong>单元测试-》编码</strong></span><br><span style="color: #ff9900;"><strong>集成测试-》详细设计</strong></span><br><span style="color: #ff9900;"><strong>系统测试-》概要设计</strong></span><br><span style="color: #ff9900;"><strong>验收测试-》需求分析</strong></span></p><p><span style="color: #ff9900;"><strong>如何由程序流程图得到流图，如何计算环形复杂度？</strong></span><br><span style="color: #ff9900;"><strong>任意一种：</strong></span><br><span style="color: #ff9900;"><strong>V(G) = E – N + 2 //E是流图中的边的条数，N是结点数</strong></span><br><span style="color: #ff9900;"><strong>V(G) = P + 1 //P是流图中判定分支点的数目</strong></span></p><p><span style="color: #ff9900;"><strong>如何将程序转化为流程图及N-S图？</strong></span><br><span style="color: #ff9900;"><strong>如何由流程图设计测试用例？（包括语句覆盖与分支覆盖）。</strong></span><br><span style="color: #ff9900;"><strong>语句覆盖：至少每个语句应该执行一次</strong></span><br><span style="color: #ff9900;"><strong>分支覆盖：也叫判定翻盖，不进每个语句必须至少执行一次，而且每个判定的每种可能结果都应该至少执行一次</strong></span></p>