<p><span style="color: #33cccc;"><strong>When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A “social cluster” is a set of people who have some of their hobbies in common. You are supposed to find all the clusters.</strong></span><br><span style="color: #3366ff;"><strong>Input Specification:</strong></span><br><span style="color: #33cccc;"><strong>Each input file contains one test case. For each test case, the first line contains a positive integer N (&lt;=1000), the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format:</strong></span><br><span style="color: #33cccc;"><strong>Ki: hi[1] hi[2] … hi[Ki]</strong></span><br><span style="color: #33cccc;"><strong>where Ki (&gt;0) is the number of hobbies, and hi[j] is the index of the j-th hobby, which is an integer in [1, 1000].</strong></span><br><span style="color: #3366ff;"><strong>Output Specification:</strong></span><br><span style="color: #33cccc;"><strong>For each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</strong></span><br><span style="color: #3366ff;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>8</strong></span><br><span style="color: #33cccc;"><strong>3: 2 7 10</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>2: 5 3</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>1: 3</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>4: 6 8 1 5</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>3</strong></span><br><span style="color: #33cccc;"><strong>4 3 1</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：有n个人，每个人喜欢k个活动，如果两个人有任意一个活动相同，就称为他们处于同一个社交网络。求这n个人一共形成了多少个社交网络。</strong></span><br><span style="color: #ff9900;"><strong>分析：并查集。先写好init、findFather、Union。</strong></span><br><span style="color: #ff9900;"><strong>0. 每个社交圈的结点号是人的编号，而不是课程。课程是用来判断是否处在一个社交圈的。</strong></span><br><span style="color: #ff9900;"><strong>1. course[t]表示任意一个喜欢t活动的人的编号。如果当前的课程t，之前并没有人喜欢过，那么就course[t] = i，i为它自己的编号，表示i为喜欢course[t]的一个人的编号</strong></span><br><span style="color: #ff9900;"><strong>2. course[t]是喜欢t活动的人的编号，那么findFather(course[t])就是喜欢这个活动的人所处的社交圈子的根结点，合并根结点和当前人的编号的结点i。即Union(i, findFather(course[t]))，把它们处在同一个社交圈子里面</strong></span><br><span style="color: #ff9900;"><strong>3. isRoot[i]表示编号i的人是不是它自己社交圈子的根结点，如果等于0表示不是根结点，如果不等于0，每次标记isRoot[findFather(i)]++，那么isRoot保存的就是如果当前是根结点，那么这个社交圈里面的总人数</strong></span><br><span style="color: #ff9900;"><strong>4. isRoot中不为0的编号的个数cnt就是社交圈圈子的个数</strong></span><br><span style="color: #ff9900;"><strong>5. 把isRoot从大到小排列，输出前cnt个，就是社交圈人数的从大到小的输出顺序</strong></span></p><p> </p>