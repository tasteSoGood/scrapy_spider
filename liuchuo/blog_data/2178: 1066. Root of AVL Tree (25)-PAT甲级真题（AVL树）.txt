<p><span style="color: #33cccc;"><strong>An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules.</strong></span><br><span style="color: #33cccc;"><strong>Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.</strong></span></p><p><img class="alignnone size-full wp-image-5713" src="https://cdn1.liuchuo.net/wp-content/uploads/2016/08/1066.png" alt="" width="1570" height="710"><br><span style="color: #3366ff;"><strong>Input Specification:</strong></span><br><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.</strong></span><br><span style="color: #3366ff;"><strong>Output Specification:</strong></span><br><span style="color: #33cccc;"><strong>For each test case, print ythe root of the resulting AVL tree in one line.</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>5</strong></span><br><span style="color: #33cccc;"><strong>88 70 61 96 120</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>70</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>7</strong></span><br><span style="color: #33cccc;"><strong>88 70 61 96 120 90 65</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>88</strong></span></p><p>Â </p>