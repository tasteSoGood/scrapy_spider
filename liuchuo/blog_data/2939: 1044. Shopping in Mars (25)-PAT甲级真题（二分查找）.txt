<p><span style="color: #33cccc;"><strong>Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M$15. We may have 3 options:</strong></span></p><p><span style="color: #33cccc;"><strong>1. Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15).</strong></span><br><span style="color: #33cccc;"><strong>2. Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15).</strong></span><br><span style="color: #33cccc;"><strong>3. Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15).</strong></span><br><span style="color: #33cccc;"><strong>Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.</strong></span></p><p><span style="color: #33cccc;"><strong>If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains 2 numbers: N (&lt;=105), the total number of diamonds on the chain, and M (&lt;=108), the amount that the customer has to pay. Then the next line contains N positive numbers D1 … DN (Di&lt;=103 for all i=1, …, N) which are the values of the diamonds. All the numbers in a line are separated by a space.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each test case, print “i-j” in a line for each pair of i &lt;= j such that Di + … + Dj = M. Note that if there are more than one solution, all the solutions must be printed in increasing order of i.</strong></span></p><p><span style="color: #33cccc;"><strong>If there is no solution, output “i-j” for pairs of i &lt;= j such that Di + … + Dj &gt; M with (Di + … + Dj – M) minimized. Again all the solutions must be printed in increasing order of i.</strong></span></p><p><span style="color: #33cccc;"><strong>It is guaranteed that the total value of diamonds is sufficient to pay the given amount.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>16 15</strong></span><br><span style="color: #33cccc;"><strong>3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>1-5</strong></span><br><span style="color: #33cccc;"><strong>4-6</strong></span><br><span style="color: #33cccc;"><strong>7-8</strong></span><br><span style="color: #33cccc;"><strong>11-11</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>5 13</strong></span><br><span style="color: #33cccc;"><strong>2 4 5 7 9</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>2-4</strong></span><br><span style="color: #33cccc;"><strong>4-5</strong></span><br><span style="color: #ff9900;"><strong>题目大意，求一串的数字中连续的一段，使得这个连续的段内数字的和恰好等于所期望的值m。如果不能找到恰好等于，就找让自己付出最少的价格（总和必须大于等于所给值）的那段区间。求所有可能的结果。</strong></span><br><span style="color: #99cc00;"><strong>分析：一开始用的简单模拟，有两个超时了。后来想到因为sum数组是递增的，所以改用二分法查找～Func函数的作用是二分查找，修改tempsum和j的值～一开始接收输入的时候可以直接保存它的sum函数，即sum[i]表示1～i的所有数字的总和～</strong></span></p><p> </p>