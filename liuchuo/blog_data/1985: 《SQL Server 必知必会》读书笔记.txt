<p><strong>–使用数据库</strong><br><strong> USE crashcourse;</strong><br><strong> –返回：</strong><br><strong> Command(s) completed successfully</strong></p><p><strong>–显示所有数据库的列表</strong><br><strong> sp_databases;</strong><br><strong> –显示当前选择的数据库内所有表的列表（包括系统表和视图）</strong><br><strong> sp_tables;</strong></p><p><strong>–显示表列</strong><br><strong> sp_columns customers;</strong></p><p><strong>–检索单个列</strong><br><strong> SELECT prood_name</strong><br><strong> FROM products;</strong><br><strong> –检索多个列</strong><br><strong> SELECT prod_id, prod_name, prod_price</strong><br><strong> FROM products;</strong><br><strong> –检索所有列</strong><br><strong> SELECT *</strong><br><strong> FROM products;</strong><br><strong> — * 叫做通配符</strong></p><p><strong>–检索不同的行</strong><br><strong> –使用DISTINCT关键字</strong><br><strong> SELECT DISTINCT vend_id</strong><br><strong> FROM products;</strong></p><p><strong>–限制只显示结果中的几行</strong><br><strong> –SQL Server 6.5及更新版本</strong><br><strong> SELECT TOP(5) prod_name</strong><br><strong> FROM products;</strong><br><strong> –更早的版本</strong><br><strong> SET ROWCOUNT 5;</strong><br><strong> SELECT prod_name</strong><br><strong> FROM products;</strong></p><p><strong>–通过添加PERCENT关键字，使用TOP来获得行的百分比</strong><br><strong> SELECT TOP(25) PERCENT prod_name</strong><br><strong> FROM products;</strong></p><p><strong>–检索任意的行</strong><br><strong> SELECT * FROM products</strong><br><strong> TABLESAMPLE (3 ROWS);</strong><br><strong> SELECT * FROM products</strong><br><strong> TABLESAMPLE (50 PERCENT);</strong></p><p><strong>–完全限定表名</strong><br><strong> SELECT products.prod_name</strong><br><strong> FROM crashcourse.dbo.products;</strong><br><strong> dbo == database owner 是表所有名的默认所有者</strong><br><strong> –ORDER BY 语句</strong><br><strong> SELECT prod_name</strong><br><strong> FROM products</strong><br><strong> ORDER BY prod_name;</strong><br><strong> –会以字母顺序排序</strong></p><p><strong>–按照多个列排序</strong><br><strong> SELECT prod_id, prod_price, prod_name</strong><br><strong> FROM products</strong><br><strong> ORDER BY prod_price, prod_name;</strong><br><strong> –先按价格排序，后按名称排序</strong></p><p><strong>SELECT prod_id, prod_price, prod_name</strong><br><strong> FROM products</strong><br><strong> ORDER BY prod_price DESC;</strong></p><p><strong>–使用order by和top组合，可能会找到一列中的最大值和最小值</strong><br><strong> SELECT TOP(1) prod_price</strong><br><strong> FROM products</strong><br><strong> ORDER BY prod_price DESC;</strong></p><p><strong>–使用where进行过滤</strong><br><strong> SELECT prod_name, prod_price</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price = 2.50;</strong><br><strong> –如果在应用层过滤，因为在客户机上过滤数据会导致服务器会不得不通过网络发送多条多余的数据，会导致网络带宽的浪费</strong></p><p><strong>&lt;&gt; != 不等于</strong></p><p><strong>–范围值检查</strong><br><strong> SELECT prod_name, prod_price</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price BETWEEN 5 AND 10;</strong></p><p><strong>–空值检查</strong><br><strong> SELECT prod_name</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price IS NOT NULL;</strong></p><p><strong>–通配符</strong><br><strong> –百分号%通配符，匹配出现任意次数的任何字符</strong><br><strong> SELECT prod_id, prod_name</strong><br><strong> FROM products</strong><br><strong> WHERE prod_name LIKE ‘%hello%’;</strong><br><strong> –SQL Server配置可以改成区分大小写的，但是SQL Sever安装的默认行为是不区分大小写</strong><br><strong> –不能匹配到NULL</strong></p><p><strong>–下划线_通配符</strong><br><strong> –只匹配单个字符</strong><br><strong> SELECT prod_id, prod_name</strong><br><strong> FROM products</strong><br><strong> WHERE prod_name LIKE ‘_ike’;</strong></p><p><strong>–方括号[]通配符(可以用前缀字符^来否定)</strong><br><strong> WHERE cust_contact LIKE ‘[ABC]%’</strong><br><strong> –以A或者B或者C开头的字符串</strong><br><strong> WHERE cust_contact LIKE ‘^[ABC]%’</strong><br><strong> –不以A或B或C开头的字符串</strong></p><p><strong>–通配符使用技巧</strong><br><strong> –不要过度使用通配符，如果能够用其他操作符达到相同的目的，就用其他操作符</strong><br><strong> –尽量不要把通配符放在搜索模式的开始处，因为这样是搜索最慢的</strong><br><strong> –仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据</strong></p><p><strong>–创建计算字段</strong><br><strong> –字段的意思和列的意思相同，数据库列一般称为列，而术语字段通常用在计算字段的连接上</strong><br><strong> –拼接：将值联结到一起构成单个值</strong><br><strong> SELECT vend_name + ‘(‘ + RTrim(vend_number) + ‘)’</strong><br><strong> FROM vendors</strong><br><strong> ORDER BY vend_name;</strong><br><strong> –RTrim()函数用来删除数据右侧多余的空格</strong><br><strong> –LTrim()函数可以删除数据左边的空格</strong><br><strong> RTrim(LTrim(vend_name))</strong><br><strong> –同时删除两边的空格</strong></p><p><strong>–给计算字段一个名字，用AS语句</strong><br><strong> ELECT vend_name + ‘(‘ + RTrim(vend_number) + ‘)’</strong><br><strong> AS vend_title</strong><br><strong> FROM vendors</strong><br><strong> ORDER BY vend_name;</strong><br><strong> –AS这两个字母是可以省略的</strong><br><strong> –别名有时候也称为派生列</strong></p><p><strong>–可以使用AS重新命名表名，在原表名左右加上[]</strong><br><strong> SELECT [Last Name] AS LastName</strong></p><p><strong>–SQL算术操作符：+ – * / %</strong><br><strong> SELECT quantity * item_price AS expanded_price</strong><br><strong> FROM prderitems</strong><br><strong> WHERE order_num = 2016</strong><br><strong> –输出中就会把新计算生成的expanded_price列为一个计算字段</strong><br><strong> –不一定需要从表中检索数据计算，也提供直接计算数字、字母表达式等（不需要from语句）</strong><br><strong> SELECT 3*2; –返回6</strong><br><strong> SELECT Trim(‘ abc ‘);</strong><br><strong> SELECT GetDate(); –GetDate()函数返回当前日期和时间</strong><br><strong> –第10章 使用数据处理函数</strong><br><strong> RTrim()去除字符串右边空格</strong><br><strong> 函数的可移植性没有SQL的可移植性高，几乎每个主要的DBMS都会支持其他DBMS不支持的函数</strong><br><strong> 如果决定使用函数，应该保证做好代码注释，以便以后你或者其他人能够确切地知道所编写SQL代码的含义</strong><br><strong> –SQL支持以下类型的函数：</strong><br><strong> 用于处理字符串（如删除或填充值，转换为大写或小写）的文本函数</strong><br><strong> 用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数</strong><br><strong> 用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性）的日期和时间函数</strong><br><strong> 返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本信息）的系统函数</strong></p><p><strong>–Upper()函数</strong><br><strong> SELECT vend_name, Upper(vend_name) AS vend_name_upcase FROM vendors</strong><br><strong> FROM vendors</strong><br><strong> ORDER BY vend_name;</strong><br><strong> –Upper()函数将文本转换为大写</strong></p><p><strong>CharIndex() –返回字符串指定字符的位置</strong><br><strong> Left() –返回字符串左边的字符</strong><br><strong> Len() –返回字符串的长度</strong><br><strong> Lower() –将字符串转换为小写</strong><br><strong> LTrim() –去掉字符串左边的空格</strong><br><strong> Replace() –用其他特殊字符替换字符串中的字符</strong><br><strong> Right() –返回字符串右边的字符</strong><br><strong> RTrim() –去掉字符串右边的空格</strong><br><strong> Soundex() –返回字符串的SOUNDEX的值(SOUNDEX)</strong><br><strong> –SOUNDEX返回由四个字符组成的代码 (SOUNDEX) 以评估两个字符串的相似性</strong><br><strong> Str() –将数值转换为字符串</strong><br><strong> SubString() –返回字符串中的字符</strong><br><strong> Upper() –将字符串转换为大写</strong></p><p><strong>–Soundex()函数</strong><br><strong> SOUNDEXOUNDEX考虑了类似的发音字符和音节，使能对字符串进行发音比较而不是字母比较</strong><br><strong> SELECT cust_name, cust_contact</strong><br><strong> FROM customers</strong><br><strong> WHERE Soundex(cust_contact) = Soundex(‘Y Lie’);</strong><br><strong> 此时会返回Y Lee的这条数据，因为这两个发音类似</strong></p><p><strong>–日期和时间处理函数</strong><br><strong> DateAdd() –添加日期（天、周等）</strong><br><strong> DateDiff() –计算两个日期的差</strong><br><strong> DateName() –返回部分日期的字符串表示</strong><br><strong> DatePart() –返回日期的一部分（星期几、月、年等）</strong><br><strong> Day() –返回日期中的天</strong><br><strong> GetDate() –返回当前日期和时间</strong><br><strong> Month() –返回日期中的月</strong><br><strong> Year() –返回日期中的年</strong></p><p><strong>T-SQL支持的几种日期的串表示格式：</strong><br><strong> 2006-08-17;</strong><br><strong> August 17, 2006;</strong><br><strong> 20060817;</strong><br><strong> 8/17/2006;</strong><br><strong> 应该总是使用4位数字的年份以避免歧义</strong></p><p><strong>SELECT cust_id, order_num</strong><br><strong> FROM orders</strong><br><strong> WHERE DateDiff(day, order_date, ‘2005-09-01’) = 0;</strong><br><strong> –因为日期存储的方式不同，可能只存了年月日，可能存了完整的时间</strong><br><strong> –所以应该总是使用DateDiff() 不要假定日期是如何存储的</strong></p><p><strong>–想要检索出2005年9月的所有订单</strong><br><strong> SELECT cust_id, order_num</strong><br><strong> FROM orders</strong><br><strong> WHERE DateDiff(month, order_date, ‘2005-09-01’) = 0;</strong><br><strong> 或者</strong><br><strong> SELECT cust_id, order_num</strong><br><strong> FROM orders</strong><br><strong> WHERE Year(order_date) = 2005 AND Month(order_date) = 9;</strong></p><p><strong>–数值处理函数</strong><br><strong> –在主要的DBMS的函数中，数值函数是最一致最统一的函数</strong><br><strong> Abs() –返回一个数的绝对值</strong><br><strong> Cos() –返回一个角度的余弦</strong><br><strong> Exp() –返回一个数的指定值</strong><br><strong> Pi() –返回圆周率</strong><br><strong> Rand() –返回一个随机数</strong><br><strong> Round() –返回四舍五入为特定长度或精度的数值</strong><br><strong> Sin() –返回一个角度的正弦</strong><br><strong> Sqrt() –返回一个数的平方根</strong><br><strong> Square()–返回一个数的平方</strong><br><strong> Tan() –返回一个角度的正切</strong></p><p><strong>–聚集函数</strong><br><strong> –5个SQL聚集函数</strong><br><strong> Avg() –返回某列的平均值</strong><br><strong> Count() –返回某列的行数</strong><br><strong> Max() –返回某列的最大值</strong><br><strong> Min() –返回某列的最小值</strong><br><strong> Sum() –返回某列值的和</strong></p><p><strong>–Avg()函数 –Avg()忽略列值为NULL的行</strong><br><strong> SELECT Avg(prod_price) AS avg_price</strong><br><strong> FROM products</strong><br><strong> WHERE vend_id = 1003;</strong></p><p><strong>–Count()函数 –返回表中行的数目或者复合特定条件的行的数目</strong><br><strong> –包括了NULL行</strong><br><strong> 能够使用Count(*)对表中的行数目进行计数</strong></p><p><strong>Count(cust_email) AS num_cust</strong><br><strong> FROM customers;</strong><br><strong> –选取具有电子邮件的客户计数,计数值在以num_cust命名的列中返回</strong><br><strong> 如果指定列名，则指定列的值为空的行被Count()函数忽略，但是如果Count()函数中用的星号(*),则不忽略</strong></p><p><strong>–Max()函数 –返回指定列中的最大值</strong><br><strong> Max()函数忽略列值为NULL的行</strong><br><strong> 如果对于非数值数据使用Max()，在用于文本数据时，如果数据按照相应的列排序，则Max()返回最后一行</strong></p><p><strong>–Min()函数 –和上一条类比</strong><br><strong> 如果对于非数值数据，返回最前面的行</strong></p><p><strong>–Sum()用来返回指定列值的和</strong><br><strong> SELECT Sum(item_price * quantity) AS total_price</strong><br><strong> FROM prderitems</strong><br><strong> WHERE order_num = 20005;</strong><br><strong> –利用标准的算术操作符，所有聚集函数都可以用来执行多个列上的计算</strong></p><p><strong>–DISTINCT参数 –如果想要只聚集不同的值</strong><br><strong> SELECT Avg(DISTINCT prod_price) AS avg_price</strong><br><strong> FROM products</strong><br><strong> WHERE wend_id = 1003;</strong></p><p><strong>–SELECT语句课根据需要包含多个聚集函数</strong><br><strong> SELECT Count(*) AS num_items,</strong><br><strong> Min(prod_price) AS price_min,</strong><br><strong> Max(prod_price) AS price_max,</strong><br><strong> Avg(prod_price) AS price_avg</strong><br><strong> FROM products;</strong></p><p><strong>–GROUP BY分组</strong><br><strong> SELECT vend_id, Count(*) AS num_prods</strong><br><strong> FROM products</strong><br><strong> GROUP BY vend_id;</strong></p><p><strong>–如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多个NULL值，他们将分为一组</strong></p><p><strong>–过滤分组</strong><br><strong> WHERE 过滤指定的行而不是分组。</strong><br><strong> HAVING 支持所有WHERE操作符</strong><br><strong> 在指定的GROUP BY子句中用HAVING代替其中的WHERE，其效果是一样的</strong></p><p><strong>–HAVING和WHERE的差别</strong><br><strong> WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤</strong></p><p><strong>SELECT vend_id, Count(*) AS num_prods</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price &gt;= 10</strong><br><strong> GROUP BY vend_id</strong><br><strong> HAVING Count(*) &gt;= 2;</strong><br><strong> –SELECT字句顺序</strong><br><strong> SELECT</strong><br><strong> FROM</strong><br><strong> WHERE</strong><br><strong> GROUP BY</strong><br><strong> HAVING</strong><br><strong> ORDER BY</strong><br><strong> –子查询（嵌套在其他查询中的查询）</strong><br><strong> SELECT cust_id</strong><br><strong> FROM orders</strong><br><strong> WHERE order_num IN (SELECT order_num</strong><br><strong> FROM orderitems</strong><br><strong> WHERE prod_id = ‘TNT2’);</strong><br><strong> 在SELECT语句中，子查询总是从内向外处理</strong><br><strong> 与EXISTS结合使用的子查询只能检索单个列</strong></p><p><strong>–作为计算字段使用子查询</strong><br><strong> SELECT cust_name.</strong><br><strong> cust_state,</strong><br><strong> (SELECT Count(*)</strong><br><strong> FROM orders</strong><br><strong> WHERE orders.cust_id = customers.cust_id) AS orders</strong><br><strong> FROM customers</strong><br><strong> ORDER BY cust_name;</strong><br><strong> –子查询的另一个用途是与EXISTS谓词联合使用。</strong><br><strong> SELECT cust_id, cust_name</strong><br><strong> FROM customers</strong><br><strong> WHERE EXISTS (SELECT *</strong><br><strong> FROM orders</strong><br><strong> WHERE DateDiff(month, order_date,</strong><br><strong> ‘2005-09-01’) = 0</strong><br><strong> AND customers.cust_id = orders.cust_id);</strong><br><strong> EXISTS语句比IN语句处理地快</strong></p><p><strong>逐步用子查询建立查询时，应该从内而外地建立</strong></p><p><strong>数据库的可伸缩性：能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称为可伸缩性好（scale well）</strong></p><p><strong>使用联结：可以联结多个表返回一组输出，联结在运行时关系表中正确的行</strong></p><p><strong>SELECT vend_name, prod_name, prod_price</strong><br><strong> FROM vendors, products</strong><br><strong> WHERE vendors.vend_id = products.vend_id</strong><br><strong> ORDER BY vend_name, prod_name;</strong></p><p><strong>联结：FROM语句后面跟着好几张表</strong></p><p><strong>笛卡尔积：由没有联结条件的表关系返回的结果为笛卡尔积</strong><br><strong> SELECT vend_name, prod_name, prod_price</strong><br><strong> FROM vendors, products</strong><br><strong> ORDER BY vend_name, prod_name;</strong></p><p><strong>不要联结不必要的表，否则可能很影响性能。通过为外键列有效地创建索引可以明显地改善这种性能下降</strong></p><p><strong>联结是SQL最重要最强大的特性，是因为关系数据库性质的要求而产生的。</strong><br><strong> 等值联结也称为内部联结。这是最经常使用的联结方式</strong></p><p><strong>SQL允许给表名起别名，这样做主要有两个理由：</strong><br><strong> 缩短SQL语句</strong><br><strong> 允许在单条SELECT语句中多次使用相同的表</strong><br><strong> 表别名只在查询执行中使用，与列别名不一样，表别名只在查询执行中使用，不返回到客户机</strong></p><p><strong>–自联结</strong><br><strong> SELECT p1.prod_id, p1.prod_name</strong><br><strong> FROM products AS p1, products AS p2</strong><br><strong> WHERE p1.vend_id = p2.vend_id</strong><br><strong> AND p2.prod_id = ‘DTNTR’;</strong></p><p><strong>自联结一般比子查询性能好效率快</strong></p><p><strong>自然联结——排除多余的列出现，每个列只返回一次</strong><br><strong> 事实上，迄今为止我们建立的每一个内部联结都是自然联结，很可能我们永远都不会用到不是自然联结的内部联结</strong></p><p><strong>–外部联结——包含了那些在相关表中没有关联行的行</strong><br><strong> LEFT OUTER JOIN 从左边表中选择所有行</strong><br><strong> RIGHT OUTER JOIN 从右边表中选择所有行</strong><br><strong> SELECT customers.cust_id, orders.order_num</strong><br><strong> FROM customers LEFT OUTER JOIN orders</strong><br><strong> ON customers.cust_id = orders.cust_id;</strong><br><strong> –检索所有的客户，包括了那些没有订单的客户，左边可能会重复</strong></p><p><strong>–简化的外部联结：</strong><br><strong> SELECT customers.cust_id, orders.order_num</strong><br><strong> FROM customers, orders</strong><br><strong> WHERE customers.cust_id *= orders.cust_id;</strong></p><p><strong>*=指示SQL Server从第一个表（customers，靠近*的表）中检索所有行，并且关联到第二个表（orders,靠近=的表）的行</strong><br><strong> *= 左外部联结</strong><br><strong> =* 右外部联结</strong><br><strong> 这种形式的语法不是ANSI标准的成分，在未来的SQL Server版本中并不支持它</strong></p><p><strong>FULL OUTER JOIN</strong><br><strong> –用来从两个表中检索相关的行，以及从每个表中检索不相关的行（这些行对另一表的非选择列具有NULL值）</strong></p><p><strong>–使用带聚集函数的联结</strong><br><strong> SELECT customers.cust_name,</strong><br><strong> customers.cust_id,</strong><br><strong> Count(orders.order_num) AS num_ord</strong><br><strong> FROM customers INNER JOIN orders</strong><br><strong> ON customers.cust_id = orders.cust_id</strong><br><strong> GROUP BY customers.cust_name,</strong><br><strong> customers.cust_id;</strong></p><p><strong>因为使用了聚集函数（Count()函数），该NULL被转换为一个数0</strong></p><p><strong>–组合查询</strong><br><strong> 可用UNION操作符来组合数条SQL语句</strong></p><p><strong>第一条 SELECT 检索价格不高于5的所有商品的所有行。</strong><br><strong> 第二条 SELECT 使用IN找出供应商1001和1002生产的所有物品</strong><br><strong> SELECT vend_id, prod_id, prod_price</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price &lt;= 5</strong><br><strong> UNION</strong><br><strong> SELECT vend_id, prod_id, prod_price</strong><br><strong> FROM products</strong><br><strong> WHERE vend_id IN (1001, 1002);</strong></p><p><strong>如果使用多条 WHERE 子句而不是使用 UNION 的相同查询：</strong><br><strong> SELECT vend_id， prod_id, prod_price</strong><br><strong> FROM products</strong><br><strong> WHERE prod_price &lt;= 5</strong><br><strong> OR vend_id IN (1001, 1002);</strong></p><p><strong>UNION 规则：</strong><br><strong> UNION 必须以两条或两条以上的 SELECT 语句组成，语句之间用关键字 UNION 分隔</strong><br><strong> UNION 中的每个查询必须包含相同的列、表达式或聚集函数，而且各个列必须以相同的次序列出</strong><br><strong> 列数据类型必须兼容，类型不必完全相同，但必须是SQL Server 可以隐含地转换的类型</strong></p><p><strong>UNION 从查询结果集中自动去除了重复的行</strong><br><strong> 如果使用 UNION ALL 那么就会保留相同的行，不取消重复的行</strong><br><strong> UNION ALL 完成了 WHERE 字句完成不了的工作，如果确实需要每个条件的匹配行都全部出现，那么必须使用 UNION ALL 而不是 WHERE</strong></p><p><strong>对组合查询的结果排序，只能使用一条 ORDER BY 子句，它必须出现在最后一条 SELECT 语句之后</strong></p><p><strong>UNION 的组合查询实际上也可以应用不同的表</strong><br><strong> 使用 UNION 可极大地简化复杂的 WHERE 子句，简化从多个表中检索数据的工作</strong></p><p><strong>–全文本搜索</strong><br><strong> –创建全文本目录</strong><br><strong> CREATE FULLTEXT CATALOG catalog_crashcourse;</strong></p><p><strong>–创建全文本索引</strong><br><strong> CREATE FULLTEXT INDEX ON productnotes(note_text)</strong><br><strong> KEY INDEX pk_productnotes</strong><br><strong> ON catalog_crashcourse;</strong></p><p><strong>不要在导入数据时使用全文本索引，因为更新索引需要花时间</strong><br><strong> 先导入数据再建立索引</strong></p><p><strong>ALTER FULLTEXT CATALOG catalog_crashcourse REBUILD;</strong><br><strong> SELECT * FROM sys.fulltext_catalogs;</strong><br><strong> SELECT * FROM sys.fulltext_indexes;</strong></p><p><strong>–使用FREETEXT进行搜索</strong><br><strong> SELECT note_id, note_text</strong><br><strong> FROM productnotes</strong><br><strong> WHERE FREETEXT(note_text, ‘rabbit food’);</strong><br><strong> –查找可能含有rabbit food含义的任何东西（不一定要连在一起，不一定要包含）</strong></p><p><strong>–用CONTAINS进行搜索</strong><br><strong> SELECT note_id, note_text</strong><br><strong> FROM productnotes</strong><br><strong> WHERE CONTAINS(note_text, ‘handsaw’);</strong></p><p><strong>CONTAINS搜索通常比LIKE更快，表越大越如此</strong><br><strong> CONTAINS 中可以使用*通配符：CONTAINS(note_text, ‘”anvil*”‘);</strong><br><strong> 表示匹配任何以anvil开始的词</strong></p><p><strong>支持在CONTAINS中使用AND、OR和NOT（布尔操作符）</strong><br><strong> SELECT note_id, note_text</strong><br><strong> FROM productnotes</strong><br><strong> WHERE CONTAINS(note_text, ‘safe AND handsaw’);</strong></p><p><strong>SELECT note_id, note_text</strong><br><strong> FROM productnotes</strong><br><strong> WHERE CONTAINS(note_text, ‘rabbit AND NOT food’);</strong></p><p><strong>–词尾变化搜索（inflectional search）</strong><br><strong> ‘FORMSOF(INFLECTIONAL, vary)’ –全文本引擎查找与指定词（vary）具有相同词干的词，包括varies</strong><br><strong> ‘FORMSOF(THESAURUS, vary)’–可以找出指定词的同义词（不过为了使用此功能，必须首先用词及其同义词填写一个XML辞典文件）</strong><br><strong> –FULLTEXT搜索用FULLTEXTTABLE()函数排序</strong><br><strong> –CONTAINS搜索用CONTAINSTABLE()函数排序</strong><br><strong> SELECT f.rank, note_id, note_text</strong><br><strong> FROM productnotes,</strong><br><strong> FREETEXTTABLE(productnotes, note_text, ‘rabbit food’) f</strong><br><strong> WHERE productnotes.note_id = f.[key]</strong><br><strong> ORDER BY rank DESC;</strong></p><p><strong>rank列显示匹配的等级值。等级值越高越匹配</strong><br><strong> 还可以用ISABLOUT()函数给特定的词赋予权重值。然后，全文本搜索引擎会在决定等级时使用这些权重值</strong></p><p><strong>–INSERT</strong><br><strong> –插入完整的行</strong><br><strong> INSERT INTO customers</strong><br><strong> VALUES(10006,</strong><br><strong> ‘myname’,</strong><br><strong> ‘CS’,</strong><br><strong> NULL,</strong><br><strong> NULL);</strong></p><p><strong>INSERT INTO customers(cust_name,</strong><br><strong> cust_address,</strong><br><strong> cust_city,</strong><br><strong> cust_email)</strong><br><strong> VALUES(‘PEabbd’,</strong><br><strong> ‘100 Main Street’,</strong><br><strong> ‘Los Angeles’,</strong><br><strong> NULL);</strong></p><p><strong>可以省略某些列，前提是该列允许NULL值，或者该表定义中给出默认值</strong></p><p><strong>INTO 关键字是可选的</strong></p><p><strong>SQL Server的单条INSERT语句不支持多个VALUES子句，一次只能插入一行值</strong></p><p><strong>插入检索出的数据：</strong><br><strong> INSERT INTO customers(cust_contact,</strong><br><strong> cust_email,</strong><br><strong> cust_name,</strong><br><strong> cust_zip)</strong><br><strong> SELECT a_contact,</strong><br><strong> a_email,</strong><br><strong> a_name,</strong><br><strong> a_zip</strong><br><strong> FROM custnew;</strong><br><strong> SELECT cust_contact,</strong><br><strong> cust_email,</strong><br><strong> cust_name,</strong><br><strong> cust_zip</strong><br><strong> INTO customersExport</strong><br><strong> FROM customers;</strong></p><p><strong>可以把 INSERT SELECT 视为一个导入操作，而把 SELECT INTO 视为一个导出操作</strong><br><strong> –更新数据</strong><br><strong> UPDATE customers</strong><br><strong> SET cust_email = ‘elmer@fudd.com’,</strong><br><strong> cust_name = ‘The Fudds’</strong><br><strong> WHERE cust_id = 10005;</strong><br><strong> –为了删除某个列的值，可以设置它为NULL</strong><br><strong> UPDATE customers</strong><br><strong> SET cust_email = NULL</strong><br><strong> WHERE cust_id = 10005;</strong></p><p><strong>–删除一行数据</strong><br><strong> DELETE FROM customers</strong><br><strong> WHERE cust_id = 10006;</strong></p><p><strong>DELETE 不需要列名或通配符。 DELETE 删除整行而不是删除列</strong></p><p><strong>为了删除列：</strong><br><strong> ALTER TABLE vendors</strong><br><strong> DROP COLUMN vend_phone;</strong><br><strong> –删除表的一个属性列</strong><br><strong> UPDATE TABLE vendors</strong><br><strong> SET vend_phone = NULL</strong><br><strong> –把某个属性列的值都变为NULL</strong></p><p><strong>DELETE 只删除行 甚至可以删除所有行，但是不删除表本身</strong></p><p><strong>SQL Server没有撤销按钮，所以应该小心地使用 UPDATE 和 DELETE</strong><br><strong> WHERE 子句非常重要</strong></p><p><strong>CREATE TABLE 用来创建新表</strong><br><strong> ALTER TABLE 用来更改表列</strong><br><strong> DROP TABLE 用来完整的删除一个表</strong></p><p><strong>CREATE TABLE orders</strong><br><strong> (</strong><br><strong> order_num INT NOT NULL IDENTITY(1, 1),</strong><br><strong> order_date DATETIME NOT NULL,</strong><br><strong> cust_id INT NOT NULL,</strong><br><strong> PRIMARY KEY (order_num, cust_id)</strong><br><strong> );</strong></p><p><strong>IDENTITY(1, 1) –从1开始，每次生成编号的增量为1</strong><br><strong> 每个表只允许一个IDENTITY列，而且identity列一般用作主键</strong></p><p><strong>@@IDENTITY 可获得当前最后生成的IDENTITY值</strong></p><p><strong>在 CREATE 时候在列属性末尾加 DEFAULT 1 可指定默认值 1</strong><br><strong> 也可以</strong><br><strong> DEFAULT GetDate() –GetDate()返回的是当前系统的日期和时间</strong><br><strong> –更改表的结构</strong><br><strong> ALTER TABLE vendors</strong><br><strong> ADD vend_phone CHAR(20);</strong><br><strong> –给表增加一个属性列</strong></p><p><strong>ALTER TABLE vendors</strong><br><strong> DROP COLUMN vend_phone;</strong><br><strong> –删除表的一个属性列</strong></p><p><strong>–ALTER TABLE 最常见的用途是定义外键</strong><br><strong> ALTER TABLE orderitems</strong><br><strong> ADD CONSTRAINT fk_orderitems_orders FOREIGN KEY (order_num)</strong><br><strong> REFERENCES orders (order_num);</strong></p><p><strong>DROP TABLE customers2;</strong><br><strong> –删除表</strong></p><p><strong>–重命名表</strong><br><strong> EXEC sp_rename ‘customers2’, ‘customers’;</strong><br><strong> 使用sp_rename可用来重命名各种对象，包括表</strong><br><strong> 视图可以嵌套，可以利用其他视图从检索数据的查询来构造一个视图</strong><br><strong> ORDER BY 不可以用在视图中，但是可以用在视图中检索数据的 SELECT 语句里</strong><br><strong> 视图不能索引，也不能有关联的触发器和默认值</strong><br><strong> 视图可以和表一起使用。例如，编写一条联结表和视图的 SELECT 语句</strong></p><p><strong>–用视图联结多个表</strong><br><strong> CREATE VIEW productcustomers AS</strong><br><strong> SELECT cust_name, cust_contact, prod_id</strong><br><strong> FROM customers, orders, orderitems</strong><br><strong> WHERE customers.cust_id = orders.cust_id</strong><br><strong> AND orderitems.order_num = orders.order_num;</strong></p><p><strong>–用视图重新格式化检索出的数据</strong><br><strong> CREATE VIEW vendorlocations AS</strong><br><strong> SELECT RTrim(vend_name) + ‘(‘ + RTrim(vend_country) + ‘)’</strong><br><strong> AS vend_title</strong><br><strong> FROM vendors;</strong></p><p><strong>–使用视图与计算字段</strong><br><strong> CREATE VIEW orderitemsexpanded AS</strong><br><strong> SELECT order_num,</strong><br><strong> prod_id,</strong><br><strong> quantity * item_price AS expanded_price</strong><br><strong> FROM orderitems;</strong></p><p><strong>–查看视图</strong><br><strong> SELECT *</strong><br><strong> FROM orderitemsexpanded</strong><br><strong> WHERE order_num = 20005;</strong></p><p><strong>视图是可更新的，更改视图将更新其基本表。</strong><br><strong> 如果视图定义中有以下操作，则不能进行视图更新：</strong><br><strong> 多个基本表、分组（GROUP BY 和 HAVING）、联结、子查询、并、聚集函数（Min() Count() Sum()）</strong><br><strong> DISTINCT 、导出（计算）列</strong></p><p><strong>–T-SQL程序设计</strong><br><strong> 变量名以@开始，局部变量@为前缀，全局变量以@@为前缀</strong><br><strong> 变量使用 DECLARE 声明它们</strong><br><strong> 声明一个变量时必须指定它的数据类型</strong><br><strong> 变量在被声明后直到处理完成前都会一直存在</strong><br><strong> DECLARE @age INT;</strong><br><strong> DECLARE @firstName CHAR(20), @lastName CHAR(20);</strong></p><p><strong>变量刚声明的时候为 NULL</strong><br><strong> 用 SET 给变量赋值</strong><br><strong> SET @lastName = ‘Forta’;</strong><br><strong> SET @firstName = ‘Ben’;</strong><br><strong> SET @age = 21;</strong></p><p><strong>也可以： SELECT @age = 21;</strong><br><strong> SET 只设置单个变量，赋值多个变量要用多条 SET 语句</strong><br><strong> SELECT 可用来在单条语句中给多个变量赋值</strong></p><p><strong>–查看变量的值</strong><br><strong> SELECT @lastName, @firstName, @age</strong><br><strong> 也可以用print语句</strong><br><strong> PRINT @lastName + ‘, ‘ + @firstName;</strong><br><strong> PRINT @age;</strong></p><p><strong>PRINT ‘Age: ‘ + Convert(CHAR, @age);</strong></p><p><strong>使用定义变量的方法把 10005 转换为变量 @num 的名称，然后在用到 10005 的地方用变量名 @num 代替以防出错</strong></p><p><strong>在给串变量赋值时需要使用单引号，但是实际使用变量时不应该使用单引号</strong><br><strong> –使用条件语句</strong><br><strong> DECLARE @open BIT</strong><br><strong> IF DatePart(dw, GetDate()) = 1</strong><br><strong> SET @open = 0</strong><br><strong> ELSE</strong><br><strong> SET @open = 1</strong></p><p><strong>–如果使用多条if或者else语句</strong><br><strong> IF @dow = 1 OR @dow = 7</strong><br><strong> BEGIN</strong><br><strong> SET @open = 0</strong><br><strong> SET @process = 0</strong><br><strong> END</strong><br><strong> ELSE</strong><br><strong> BEGIN</strong><br><strong> SET @open = 0</strong><br><strong> SET @process = 0</strong><br><strong> END</strong></p><p><strong>–while语句</strong><br><strong> WHILE @counter &lt;= 10</strong><br><strong> BEGIN</strong><br><strong> PRINT @counter</strong><br><strong> SET @counter = @counter + 1</strong><br><strong> END</strong></p><p><strong>while语句中也可以使用 BREAK 和 CONTINUE</strong></p><p><strong>–执行存储过程</strong><br><strong> EXECUTE productpricing @cheap OUTPUT,</strong><br><strong> @expensive OUTPUT,</strong><br><strong> @average OUTPUT</strong><br><strong> –创建存储过程</strong><br><strong> CREATE PROCEDURE productpricing</strong><br><strong> @price_min MONEY OUTPUT</strong><br><strong> @PRICE_max MONEY OUTPUT</strong><br><strong> @price_avg MONEY OUTPUT</strong><br><strong> AS</strong><br><strong> BEGIN</strong><br><strong> SELECT @price_min = Min(prod_price)</strong><br><strong> FROM products;</strong><br><strong> SELECT @price_max = Max(prod_price)</strong><br><strong> FROM products;</strong><br><strong> SELECT @price_avg = Avg(prod_price)</strong><br><strong> FROM products;</strong><br><strong> END;</strong></p><p><strong>–删除</strong><br><strong> DROP PROCEDURE productpricing;</strong></p><p><strong>–执行（不返回任何数据）</strong><br><strong> DECLARE @cheap MONEY</strong><br><strong> DECLARE @expensive MONEY</strong><br><strong> DECLARE @AVERAGE MONEY</strong><br><strong> EXECUTE productpricing @cheap OUTPUT,</strong><br><strong> @expensive OUTPUT,</strong><br><strong> @average OUTPUT</strong></p><p><strong>–显示</strong><br><strong> SELECT @cheap;</strong></p><p><strong>SELECT @cheap, @expensive, @average;</strong></p><p><strong>OUTPUT 表示从存储过程中返回计算的值到变量，这个过程并不会输出，要查看变量的值要用SELECT语句</strong></p><p><strong>所有存储过程基本上都是封装简单的T-SQL语句</strong><br><strong> –游标</strong><br><strong> 游标是一个存储在SQL Server上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集</strong><br><strong> 在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据</strong></p><p><strong>–创建游标</strong><br><strong> DECLARE orders_cursor CURSOR</strong><br><strong> FOR</strong><br><strong> SELECT order_num FROM orders ORDER BY order_num;</strong></p><p><strong>–删除游标</strong><br><strong> DEALLOCATE orders_cursor;</strong></p><p><strong>–打开关闭游标</strong><br><strong> OPEN orders_cursor;</strong><br><strong> CLOSE orders_cursor;</strong></p><p><strong>声明游标后可以多次打开和关闭，打开游标后可多次使用它直到它被关闭</strong></p><p><strong>–使用游标数据</strong><br><strong> FETCH NEXT FROM orders_cursor INTO @order_num;</strong><br><strong> –FETCH</strong><br><strong> FETCH NEXT –取下一行</strong><br><strong> FETCH PRIOR –检索前一行</strong><br><strong> FETCH FIRST –检索第一行</strong><br><strong> FETCH LAST –检索最后一行</strong><br><strong> FETCH ABSOLUTE –取从顶端开始的特定行数的行</strong><br><strong> FETCH RELATIVE –取从当前行开始的特定行数的行</strong></p><p><strong>@@FETCH_STATUS –获得fetch的状态码。如果fetch成功返回0，否则返回一个负值</strong></p><p><strong>–使用触发器</strong><br><strong> 触发器就是SQL Server响应 DELETE、INSERT、UPDATE 中的任何语句而自动执行的T-SQL语句</strong><br><strong> 表和视图支持触发器，但临时表不支持</strong></p><p><strong>CREATE TRIGGER newproduct_trigger ON products</strong><br><strong> AFTER INSERT</strong><br><strong> AS</strong><br><strong> SELECT ‘Product added’;</strong></p><p><strong>每个表每个事件每次只允许一个触发器，因此每个表最多支持3个触发器（INSERT、UPDATE、DELETE各一个触发器）</strong></p><p><strong>单个触发器可以与多个事件关联</strong><br><strong> AFTER INSERT, UPDATE</strong></p><p><strong>–删除触发器</strong><br><strong> DROP TRIGGER newproduct_trigger;</strong></p><p><strong>–禁用和重新启用触发器</strong><br><strong> DISABLE TRIGGER newproduct_trigger ON products;</strong><br><strong> ENABLE TRIGGER newproduct_trigger ON products;</strong></p><p><strong>–确定触发器的任务 –返回响应表明所拥有的触发器的列表</strong><br><strong> SP_HELPTRIGGER products;</strong></p><p><strong>–INSERT触发器 访问被插入的行</strong><br><strong> CREATE TRIGGER neworder_trigger ON orders</strong><br><strong> AFTER INSERT</strong><br><strong> AS</strong><br><strong> SELECT @@IDENTITY AS order_num;</strong></p><p><strong>–DELETE触发器 访问被删除的行</strong><br><strong> CREATE TRIGGER deleteorder_trigger ON orders</strong><br><strong> AFTER DELETE</strong><br><strong> AS</strong><br><strong> BEGIN</strong><br><strong> INSERT INTO orders_achive(order_num, order_date, cust_id)</strong><br><strong> SELECT order_num, order_date, cust_id FROM DELETED;</strong><br><strong> END;</strong></p><p><strong>–UPDATE触发器 –引用名为DELETED的虚拟表访问以前的值，引用名为INSERTED的虚拟表访问新更新的值</strong><br><strong> CREATE TRIGGER vendor_trigger ON vendors</strong><br><strong> AFTER INSERT, UPDATE</strong><br><strong> AS</strong><br><strong> BEGIN</strong><br><strong> UPDATE vendors</strong><br><strong> SET vend_state = Upper(vend_state)</strong><br><strong> WHERE vend_id IN (SELECT VEND_ID FROM INSERTED)</strong><br><strong> END;</strong></p><p><strong>–事务处理</strong><br><strong> 事务：一组SQL语句</strong><br><strong> 回退：撤销指定SQL语句的过程</strong><br><strong> 提交：将为存储的SQL语句结果写入数据库表</strong><br><strong> 保留点：事务处理中设置的临时占位符，可以对它发布回退（与回退整个事务处理不同）</strong></p><p><strong>事务处理用来管理 INSERT 、 UPDATE 和 DELETE</strong><br><strong> 不能回退 SELECT CREATE 和 DROP 操作</strong></p><p><strong>事务处理块中，提交不会隐含地进行，需要明确的提交，使用COMMIT语句</strong><br><strong> BEGIN TRANSACTION;</strong><br><strong> DELETE FROM orderitems WHERE order_num = 20010;</strong><br><strong> DELETE FROM orders WHERE order_num = 20010;</strong><br><strong> COMMIT;</strong></p><p><strong>–使用保留点</strong><br><strong> SAVE TRANSACTION delete1;</strong><br><strong> –退回到保留点</strong><br><strong> ROLLBACK TRANSACTION delete1;</strong><br><strong> –退回到事务的开始</strong><br><strong> ROLLBACK TRANSACTION;</strong></p><p><strong>保留点越多越好。越能让我们随时回滚到想要回到的位置。</strong></p><p><strong>–更改自动提交行为，使SQL Server不自动提交更改</strong><br><strong> SET IMPLICIT_TRANSACTIONS ON;</strong></p><p><strong>XML已经成了一个标准的机制，可通过它交换、分发和持久化存储数据</strong></p><p><strong>–FOR XML 指示SQL Server生成 XML 输出</strong><br><strong> SELECT vend_id, RTrim(vend_name) AS vend_name</strong><br><strong> FROM vendors</strong><br><strong> ORDER BY vend_name</strong><br><strong> FOR XML AUTO;</strong></p><p><strong>–SQL Server中提供了XML这种数据类型 可用来存储合式的XML</strong><br><strong> XQuery 是一种用于XML的查询语言：SQL用于关系数据库，而XQuery用于XML数据</strong></p><p><strong>–使用Cast()函数把每个串转换为XML</strong><br><strong> Cast(‘&lt;state abbrev = “NY”&gt;</strong><br><strong> &lt;city name = “New York” /&gt;</strong><br><strong> &lt;/state&gt;’ AS XML);</strong></p><p><strong>字符集：字母和符号的集合。</strong><br><strong> 编码：某个字符集成员的内部表示。</strong><br><strong> 校对：规定字符如何比较的指令。</strong></p><p><strong>–返回所有可用的校对顺序列表</strong><br><strong> SELECT * FROM fn_helpcollations();</strong><br><strong> –查看默认的校对程序</strong><br><strong> SELECT ServerProperty(‘Collation’) AS Collation;</strong></p><p><strong>指定校对顺序</strong><br><strong> SELECT * FROM customers</strong><br><strong> ORDER BY cust_name COLLATE SQL_Latin1_General_CP1_CS_AS;</strong></p><p><strong>SELECT cust_id, cust_name</strong><br><strong> FROM customers</strong><br><strong> WHERE cust_name COLLATE SQL_Latin1_General_CP1_CS_AS LIKE ‘%E%’;</strong></p><p><strong>COLLATE还可以用作 GROUP BY、HAVING、聚集函数、别名</strong></p><p><strong>VALUES(1000, N’≈ÇÍ∑’)</strong><br><strong> 在前面加’N’作为串的前缀，告诉SQL Server把后跟的文本视为Unicode对待</strong></p><p><strong>sa(System Administrator)对整个SQL Server具有完全的控制</strong><br><strong> 在现实世界的日常工作中，决不能使用sa。应该创建一系列帐号，有的用于管理，有的供用户使用，有的供开发人员使用等等</strong></p><p><strong>–返回所有登录信息</strong><br><strong> EXEC sp_helplogins;</strong></p><p><strong>–创建用户帐号</strong><br><strong> CREATE LOGIN BenF WITH PASSWORD = “888888”;</strong></p><p><strong>–删除用户帐号</strong><br><strong> DROP LOGIN BenF;</strong></p><p><strong>–禁用和启用帐号</strong><br><strong> ALTER LOGIN BenF DISABLE;</strong><br><strong> ALTER LOGIN BenF ENABLE;</strong></p><p><strong>–重命名登录：</strong><br><strong> ALTER LOGIN BenF WITH NAME = BenForta;</strong></p><p><strong>–更改口令</strong><br><strong> ALTER LOGIN BenF WITH PASSWORD = ‘000000’;</strong></p><p><strong>–设置访问权限</strong><br><strong> GRANT CREATE TABLE TO BenF;</strong><br><strong> 在末尾加 WITH GRANT OPTION 表示允许用户把相同的访问权限授予别的用户</strong><br><strong> –删除访问权限</strong><br><strong> REVOKE CREATE TABLE FROM BenF;</strong></p><p><strong>–改善性能</strong><br><strong> 使用Windows Systems Monitor见识SQL Server的磁盘以及内屏使用、关键事件的更改等</strong><br><strong> 存储过程执行比一条一条地执行其中的各条SQL Server语句快</strong><br><strong> 绝对不要检索比需求还要多的数据 不要用SELECT * 除非你真的需要每一列</strong><br><strong> 如果SELECT中有一系列复杂的OR，创始改变成多条SELECT语句和连接它们的UNION语句</strong><br><strong> 索引改善数据检索的性能，但是损害数据插入、删除和更新的性能。如果你又一些表，它们收集数据但是不经常用作搜索，就没必要索引它们</strong><br><strong> LIKE很慢。一般来说最好用FREETEXT或者CONTAINS进行全文本搜索</strong></p>