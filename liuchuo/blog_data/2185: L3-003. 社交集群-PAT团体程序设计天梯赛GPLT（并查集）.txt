<p><span style="color: #33cccc;"><strong>在社交网络平台注册时，用户通常会输入自己的兴趣爱好，以便找到和自己兴趣相投的朋友。有部分兴趣相同的人们就形成了“社交集群”。现请你编写程序，找出所有的集群。</strong></span><br><span style="color: #3366ff;"><strong>输入格式：</strong></span><br><span style="color: #33cccc;"><strong>输入的第一行给出正整数N（&lt;=1000），即社交网络中的用户总数（则用户从1到N编号）。随后N行，每行按下列格式列出每个人的兴趣爱好：</strong></span><br><span style="color: #33cccc;"><strong>Ki: hi[1] hi[2] … hi[Ki]</strong></span><br><span style="color: #33cccc;"><strong>其中Ki（&gt;0）是第i个人的兴趣的数量，hi[j]是第i个人的第j项兴趣的编号，编号范围为[1, 1000]内的整数。</strong></span><br><span style="color: #3366ff;"><strong>输出格式：</strong></span><br><span style="color: #33cccc;"><strong>首先在第一行输出整个网络中集群的数量，然后在第二行按非递增的顺序输出每个集群中用户的数量。数字间以1个空格分隔，行首尾不得有多余空格。</strong></span><br><span style="color: #3366ff;"><strong>输入样例：</strong></span><br><span style="color: #33cccc;"><strong>8</strong></span><br><span style="color: #33cccc;"><strong>3: 2 7 10</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>2: 5 3</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>1: 3</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #33cccc;"><strong>4: 6 8 1 5</strong></span><br><span style="color: #33cccc;"><strong>1: 4</strong></span><br><span style="color: #3366ff;"><strong>输出样例：</strong></span><br><span style="color: #33cccc;"><strong>3</strong></span><br><span style="color: #33cccc;"><strong>4 3 1</strong></span><br><span style="color: #ff9900;"><strong>分析：并查集。先写好init、findFather、Union。</strong></span><br><span style="color: #ff9900;"><strong>0. 每个社交圈的结点号是人的编号，而不是课程。课程是用来判断是否处在一个社交圈的。</strong></span><br><span style="color: #ff9900;"><strong>1. course[t]表示任意一个喜欢t活动的人的编号。如果当前的课程t，之前并没有人喜欢过，那么就course[t] = i，i为它自己的编号，表示i为喜欢course[t]的一个人的编号</strong></span><br><span style="color: #ff9900;"><strong>2. course[t]是喜欢t活动的人的编号，那么findFather(course[t])就是喜欢这个活动的人所处的社交圈子的根结点，合并根结点和当前人的编号的结点i。即Union(i, findFather(course[t]))，把它们处在同一个社交圈子里面</strong></span><br><span style="color: #ff9900;"><strong>3. isRoot[i]表示编号i的人是不是它自己社交圈子的根结点，如果等于0表示不是根结点，如果不等于0，每次标记isRoot[findFather(i)]++，那么isRoot保存的就是如果当前是根结点，那么这个社交圈里面的总人数</strong></span><br><span style="color: #ff9900;"><strong>4. isRoot中不为0的编号的个数cnt就是社交圈圈子的个数</strong></span><br><span style="color: #ff9900;"><strong>5. 把isRoot从大到小排列，输出前cnt个，就是社交圈人数的从大到小的输出顺序</strong></span></p><p> </p>