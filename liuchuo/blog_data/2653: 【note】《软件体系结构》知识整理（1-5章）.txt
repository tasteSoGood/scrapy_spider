<p>软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题</p><p>采用工程的方法进行软件生产可以克服软件危机，于是诞生了软件工程</p><p>软件工程是用工程、科学和数学的原则与方法研制、维护计算机软件的有关技术及管理方法</p><p>软件工程包括三个要素：方法、工具和过程</p><p>软件重用是指在两次或多次不同的软件开发过程中重复使用相同或相近软件元素的过程。</p><p>软件元素包括程序代码、测试用例、设计文档、设计过程、需求分析文档甚至领域知识。这些可重用的元素称做软构件，简称构件</p><p>由于构件大都经过严格的质量认证，并在实际运行环境中得到检验，因此，重用构件有助于改善软件质量</p><p>构件是指语义完整、语法正确和有可重用价值的单位软件，是软件重用过程中可以明确辨识的系统；结构上，它是语义描述、通信接口和实现代码的复合体。简单地说，构件是具有一定的功能，能够独立工作或能同其它构件装配起来协调工作的程序体。</p><p>构件模型是对构件本质特征的抽象描述</p><p>在建立基于构件的软件开发（component-based software development, CBSD）中，构件获取可以有多种不同的途径：</p><p>一个组织在进行以上决策时，必须考虑到不同方式获得构件的一次性成本和以后的维护成本，然后做出最优的选择</p><p>对大量的构件进行有效的管理，以方便构件的存储、检索和提取，是成功重用构件的必要保证。构件管理的内容包括构建描述、构建分类、构件库组织、人员及权限管理和用户意见反馈等</p><p>软件体系结构为软件系统提供了一个结构，行为和属性的高级抽象，由构成系统的元素的描述，这些元素的相互作用，知道元素集成的模式以及这些模式的约束组成</p><p>可以将软件体系结构的模型分为5种：结构模型、框架模型、动态模型、过程模型和功能模型。最常用的是结构模型和动态模型</p><p>“4+1”视图模型从5个不同的视角，包括逻辑视图、进程视图、物理视图、开发视图和场景视图来描述软件体系结构。每一个视图只关心一个侧面，5个视图结合在一起才能反映系统的软件体系结构的全部内容</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_16.png" alt=""></p><p>逻辑视图主要支持系统的功能需求，即系统提供给最终用户的服务。在逻辑视图中，系统分解成一系列的功能抽象，这些抽象主要来自问题领域。逻辑视图中使用的符号集合如下</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_17.png" alt=""></p><p>开发视图也称模块视图，主要侧重于软件模块的组织和管理。软件可通过程序库或子系统进行组织，这样，对于一个软件系统，就可以由不同的人进行开发。下图是用来表示开发视图的符号</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_18.png" alt=""></p><p>进程视图侧重于系统的运行特性，主要关注一些非功能性的需求。进程视图强调并发性、分布性、系统集成性和容错能力，以及从逻辑视图中的主要抽象如何适合进程结构。如下是进程视图使用的标记符号</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_19.png" alt=""></p><p>物理视图主要考虑如何把软件映射到硬件上，它通常要考虑系统性能、规模、可靠性等。下图是物理视图的标记元素集合</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_20.png" alt=""></p><p>体系结构的核心模型由5种元素组成：构件、连接件、配置、端口和角色。其中构件、连接件和配置是最基本的元素</p><p>构件是具有某种功能的可重用的软件模块单元，表示系统中主要的计算元素和数据存储。构件有两种：复合构件和原子构件</p><p>连接件表示构件之间的交互，简单的连接件如：管道、过程调用、事件广播等，更为复杂的交互如：客户-服务器通信协议，数据库和应用之间的SQL链接等</p><p>配置表示构件和连接件的拓扑逻辑和约束</p><p>软件体系结构风格是描述某一特定应用领域中系统组织方式的管用模式。体系结构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束</p><p>在管道/过滤器风格的软件体系结构中，每个构件都有一组输入和输出，构件读输入的数据流，经过内部处理，然后产生输出数据流。</p><p>管道/过滤器风格的软件体系结构具有许多很好的特点：</p><p>这样的系统也存在着若干不利因素：</p><p>这种风格建立在数据抽象和面向对象的基础上，数据的表示方法和他们的相应操作封装在一个抽象数据类型或对象中</p><p>面向对象的系统有许多的优点：</p><p>但是，面向对象的系统也存在着某些问题</p><p>基于事件的隐式调用风格的思想是构件不直接调用一个过程，而是触发或广播一个或多个事件。系统中的其他构件中的过程在一个或多个事件中注册，当一个事件被触发，系统自动调用在这个事件中注册的所有过程，这样，一个事件的触发就导致了另一个模块中的过程的调用</p><p>基于事件的隐式调用风格的主要特点是事件的触发者并不知道哪些构件会被这些事件影响</p><p>隐式调用系统的主要优点如下：</p><p>隐式调用系统的主要缺点如下：</p><p>层次系统组成成一个层次结构，每一层为上层服务，并作为下层客户。</p><p>层次系统的许多可取属性如下：</p><p>但是，层次系统也有不足之处，如下：</p><p>在仓库风格中，有两种不同的构件：中央数据结构说明当前状态，独立构件在中央数据存储上执行，仓库与外构件间的相互作用在系统中会有大的变化</p><p>黑板系统主要由一下三部分组成：</p><p>C2体系结构风格可以概括为：通过连接件绑定在一起按照一组规则运作的并行构件网络</p><p>C2风格中的系统组织规则如下：</p><p>C2风格具有以下特点：</p><p>C/S体系结构有三个主要组成部分：数据库服务器、客户应用程序和网络</p><p>服务器的主要任务是：</p><p>客户应用程序的主要任务是：</p><p>网络通信软件的主要作用是完成数据库服务器和客户应用程序之间的数据传输</p><p>C/S体系结构的优点主要在于系统的客户应用程序和服务器构件分别运行在不同的计算机上，系统中每台服务器都可以适合各构件的要求，这对于硬件和软件的变化显示出极大的适应性和灵活性，而且易于对系统进行扩充和缩小</p><p>C/S体系结构的缺点如下：</p><p>传统的二层C/S结构存在以下几个局限：</p><p>三层C/S结构如图</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161112_21.png" alt=""></p><p>三层C/S体系结构是讲应用功能分成表示层、功能层和数据层三个部分</p><p>浏览器/服务器风格就是三层C/S结构的一种实现方式，具体结构为浏览器/Web服务器/数据库服务器</p><p>B/S体系结构的不足之处：</p><p>公共对象请求代理(common object request broker architecture, CORBA)是由对象管理组织OMG制定的一个工业标准，其主要目标是提供一种机制，使得对象可以透明地发出请求和获得应答，从而建立起一个异质的分布式应用环境</p><p>正交软件体系结构由组织层和线索的构件构成。组织层是一组有相同抽象级别的构件构成。线索是子系统的特定，它是由完成不同层次功能的构件组成，每一条线索完成整个系统中相对独立的一部分功能。简单来讲，就是不同线索中的构件之间没有相互调用，那么这个结构就是完全正交的</p><p>正交软件体系结构的主要特征如下：</p><p>正交软件体系结构的优点如下：</p><p>层次消息总线（hierarchy message bus, HMB）的风格的各个组成要素：构件模型、构件接口</p><p>HMB风格的构件模型包括接口、静态接口和动态行为三个部分，如图</p><p><img src="http://www.liuchuo.net/wp-content/uploads/2016/11/Snip20161113_22.png" alt=""></p><p>在体系结构设计层次上，构件通过接口定义了同外界的信息传递和承担的系统责任，构建接口代表了构件同环境的全部交互内容，也是唯一的交互途径</p><p>HMB风格的消息总线是系统的连接件，构件向消息总线等级感兴趣的消息，形成构件消息响应登记表</p><p>HMB风格方便地支持运行时刻的系统演化，主要体现在以下三个方面：</p><p>互联系统构成的系统(system of interconnected system, SIS)是指系统可以分成若干个不同的部分，每个部分作为单独的系统独立开发。整个系统通过一组互联系统实现，而互联系统之间相互通信，履行系统的职责</p><p>软件过程：系统分解，用例建模，分析和设计，实现，测试，演化和维护</p><p>特定领域软件体系结构(domain specific software architecture, DSSA)的必备特征：</p><p>从功能覆盖的范围角度有两种理解DSSA中领域的含义的方式：</p><p>DSSA的建立过程分为五个阶段：</p><p>DSSA的建立过程是并发的、递归的和反复进行的。该过程的目的是将用户的需求映射为基于实现限制集合的软件需求，这些需求定义了DSSA</p><p>ADL是这样的一种形式化语言，它在底层语义模型的支持下，为软件系统的概念体系结构建模提供了具体语法和概念框架</p><p>UniCon及其支持工具的主要目的有：</p><p>Wright支持对构件之间交互的形式化和分析。</p><p>Wright的主要特点为：对体系结构和抽象行为的精确描述、定义体系结构风格的能力和一组对体系结构描述进行一致性和完整性的插件</p><p>Rapide是一种可执行的ADL，其目的在于通过定义并模拟基于事件的行为对分布式并发系统建模</p><p>Rapide由五种子语言构成：</p><p>Rapide的优点在于能够提供多种分析工具</p><p>Aesop的目的是建立一个工具包，为领域特定的体系结构快速构件软件体系结构设计环境，每个这样的环境都支持一下五个方面：</p><p>ACME最初目的是为了创建一门简单的、具有一般性的ADL，该ADL能用来为体系结构设计工具转换形式，和/或为开发新的设计和分析工具提供基础</p><p>ACME支持从四个不同的方面对软件体系结构进行描述，分别是结构、属性、约束、类型和风格</p><p>统一建模语言(UML)是一个通用的可视化建模语言，用于对软件进行描述、可视化处理、构造和建立软件系统的文档。它记录了对必须构造的系统的决定和理解，可用于对系统的理解、设计、浏览、配置、维护和信息控制</p><p>体系结构的动态性主要分为三类：</p><p>允许在系统运行时发生更新的软件体系结构称为动态软件体系结构，动态体系结构在系统被创建后可以被动态地更新</p>