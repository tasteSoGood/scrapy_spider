<p><span style="color: #33cccc;"><strong>For a student taking the online course “Data Structures” on China University MOOC (http://www.icourse163.org/), to be qualified for a certificate, he/she must first obtain no less than 200 points from the online programming assignments, and then receive a final grade no less than 60 out of 100. The final grade is calculated by G = (Gmid-termx 40% + Gfinalx 60%) if Gmid-term &gt; Gfinal, or Gfinal will be taken as the final grade G. Here Gmid-term and Gfinal are the student’s scores of the mid-term and the final exams, respectively.</strong></span></p><p><span style="color: #33cccc;"><strong>The problem is that different exams have different grading sheets. Your job is to write a program to merge all the grading sheets into one.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line gives three positive integers: P , the number of students having done the online programming assignments; M, the number of students on the mid-term list; and N, the number of students on the final exam list. All the numbers are no more than 10,000.</strong></span></p><p><span style="color: #33cccc;"><strong>Then three blocks follow. The first block contains P online programming scores Gp’s; the second one contains M mid-term scores Gmid-term’s; and the last one contains N final exam scores Gfinal’s. Each score occupies a line with the format: StudentID Score, where StudentID is a string of no more than 20 English letters and digits, and Score is a nonnegative integer (the maximum score of the online programming is 900, and that of the mid-term and final exams is 100).</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each case, print the list of students who are qualified for certificates. Each student occupies a line with the format:</strong></span></p><p><span style="color: #33cccc;"><strong>StudentID Gp Gmid-term Gfinal G</strong></span></p><p><span style="color: #33cccc;"><strong>If some score does not exist, output “-1” instead. The output must be sorted in descending order of their final grades (G must be rounded up to an integer). If there is a tie, output in ascending order of their StudentID’s. It is guaranteed that the StudentID’s are all distinct, and there is at least one qualified student.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>6 6 7</strong></span><br><span style="color: #33cccc;"><strong>01234 880</strong></span><br><span style="color: #33cccc;"><strong>a1903 199</strong></span><br><span style="color: #33cccc;"><strong>ydjh2 200</strong></span><br><span style="color: #33cccc;"><strong>wehu8 300</strong></span><br><span style="color: #33cccc;"><strong>dx86w 220</strong></span><br><span style="color: #33cccc;"><strong>missing 400</strong></span><br><span style="color: #33cccc;"><strong>ydhfu77 99</strong></span><br><span style="color: #33cccc;"><strong>wehu8 55</strong></span><br><span style="color: #33cccc;"><strong>ydjh2 98</strong></span><br><span style="color: #33cccc;"><strong>dx86w 88</strong></span><br><span style="color: #33cccc;"><strong>a1903 86</strong></span><br><span style="color: #33cccc;"><strong>01234 39</strong></span><br><span style="color: #33cccc;"><strong>ydhfu77 88</strong></span><br><span style="color: #33cccc;"><strong>a1903 66</strong></span><br><span style="color: #33cccc;"><strong>01234 58</strong></span><br><span style="color: #33cccc;"><strong>wehu8 84</strong></span><br><span style="color: #33cccc;"><strong>ydjh2 82</strong></span><br><span style="color: #33cccc;"><strong>missing 99</strong></span><br><span style="color: #33cccc;"><strong>dx86w 81</strong></span><br><span style="color: #33cccc;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>missing 400 -1 99 99</strong></span><br><span style="color: #33cccc;"><strong>ydjh2 200 98 82 88</strong></span><br><span style="color: #33cccc;"><strong>dx86w 220 88 81 84</strong></span><br><span style="color: #33cccc;"><strong>wehu8 300 55 84 84</strong></span></p><p><span style="color: #ff9900;"><strong>分析：1 因为所有人必须要G编程&gt;=200分，所以用v数组保存所有G编程&gt;=200的人，（一开始gm和gf都为-1），用map映射保存名字所对应v中的下标（为了避免与“不存在”混淆，保存下标+1，当为0时表示该学生的姓名在v中不存在）</strong></span><br><span style="color: #ff9900;"><strong>2 G期中中出现的名字，如果对应的map并不存在（==0），说明该学生编程成绩不满足条件，则无须保存该学生信息。将存在的人的期中考试成绩更新</strong></span><br><span style="color: #ff9900;"><strong>3 G期末中出现的名字，也必须保证在map中存在。先更新G期末和G总为新的成绩，当G期末&lt;G期中时再将G总更新为(G期中x 40% + G期末x 60%)</strong></span><br><span style="color: #ff9900;"><strong>4 将v数组中所有G总满足条件的放入ans数组中，对ans排序（总分递减，总分相同则姓名递增），最后输出ans中的学生信息</strong></span></p><p> </p>