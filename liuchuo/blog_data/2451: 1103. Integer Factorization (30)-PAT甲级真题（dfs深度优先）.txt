<p><span style="color: #33cccc;"><strong>The K-P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a program to find the K-P factorization of N for any positive integers N, K and P.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case which gives in a line the three positive integers N (&lt;=400), K (&lt;=N) and P (1&lt;P&lt;=7). The numbers in a line are separated by a space.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each case, if the solution exists, output in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>N = n1^P + … nK^P</strong></span></p><p><span style="color: #33cccc;"><strong>where ni (i=1, … K) is the i-th factor. All the factors must be printed in non-increasing order.</strong></span></p><p><span style="color: #33cccc;"><strong>Note: the solution may not be unique. For example, the 5-2 factorization of 169 has 9 solutions, such as 122 + 42 + 22 + 22 + 12, or 112 + 62 + 22 + 22 + 22, or more. You must output the one with the maximum sum of the factors. If there is a tie, the largest factor sequence must be chosen — sequence { a1, a2, … aK } is said to be larger than { b1, b2, … bK } if there exists 1&lt;=L&lt;=K such that ai=bi for i&lt;L and aL&gt;bL</strong></span></p><p><span style="color: #33cccc;"><strong>If there is no solution, simple output “Impossible”.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>169 5 2</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>169 = 6^2 + 6^2 + 6^2 + 6^2 + 5^2</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>169 167 3</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>Impossible</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：给三个正整数N、K、P，将N表示成K个正整数（可以相同，递减排列）的P次方和，如果有多种方案，选择底数n1+…+nk最大的方案，如果还有多种方案，选择底数序列的字典序最大的方案～</strong></span></p><p><span style="color: #ff9900;"><strong>分析：dfs深度优先搜索。先把i从0开始所有的i的p次方的值存储在v[i]中，直到v[i] &gt; n为止。然后深度优先搜索，记录当前正在相加的index（即v[i]的i的值），当前的总和tempSum，当前K的总个数tempK，以及因为题目中要求输出因子的和最大的那个，所以保存一个facSum为当前因子的和，让它和maxFacSum比较，如果比maxFacSum大就更新maxFacSum和要求的ans数组的值。</strong></span><br><span style="color: #ff9900;"> <strong>在ans数组里面存储因子的序列，tempAns为当前深度优先遍历而来的序列，从v[i]的最后一个index开始一直到index == 1，因为这样才能保证ans和tempAns数组里面保存的是从大到小的因子的顺序。一开始maxFacSum == -1，如果dfs后maxFacSum并没有被更新，还是-1，那么就输出Impossible，否则输出答案。</strong></span></p><p><span style="color: #ff99cc;"><strong>（PS：感谢github用户littlesevenmo提供的更优解）</strong></span><br><span style="color: #ff99cc;"><strong>分析：这道题考的是DFS+剪枝，我认为主要剪枝的地方有三个：</strong></span><br><span style="color: #ff99cc;"><strong>1. tempK==K但是tempSum!=n的时候需要剪枝</strong></span><br><span style="color: #ff99cc;"><strong>2. 在枚举的时候，按顺序枚举，上界或者下界可进行剪枝</strong></span><br><span style="color: #ff99cc;"><strong>3. 当且仅当tempSum + v[index] &lt;= n时，进行下一层的DFS，而不要进入下一层DFS发现不满足条件再返回，这样开销会比较大～</strong></span></p><p> </p>