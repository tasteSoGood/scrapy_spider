<p><strong><span style="color: #99cc00;">著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的N个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</span></strong><br><strong><span style="color: #99cc00;"> 例如给定N = 5, 排列是1、3、2、4、5。则：</span></strong><br><strong><span style="color: #99cc00;"> 1的左边没有元素，右边的元素都比它大，所以它可能是主元；</span></strong><br><strong><span style="color: #99cc00;"> 尽管3的左边元素都比它小，但是它右边的2它小，所以它不能是主元；</span></strong><br><strong><span style="color: #99cc00;"> 尽管2的右边元素都比它大，但其左边的3比它大，所以它不能是主元；</span></strong><br><strong><span style="color: #99cc00;"> 类似原因，4和5都可能是主元。</span></strong><br><strong><span style="color: #99cc00;"> 因此，有3个元素可能是主元。</span></strong><br><span style="color: #3366ff;"><strong> 输入格式：</strong></span><br><strong><span style="color: #99cc00;"> 输入在第1行中给出一个正整数N（&lt;= 105）； 第2行是空格分隔的N个不同的正整数，每个数不超过109。</span></strong><br><span style="color: #3366ff;"><strong> 输出格式：</strong></span><br><strong><span style="color: #99cc00;"> 在第1行中输出有可能是主元的元素个数；在第2行中按递增顺序输出这些元素，其间以1个空格分隔，行末不得有多余空格。</span></strong><br><span style="color: #3366ff;"><strong> 输入样例：</strong></span><br><strong><span style="color: #99cc00;"> 5</span></strong><br><strong><span style="color: #99cc00;"> 1 3 2 4 5</span></strong><br><span style="color: #3366ff;"><strong> 输出样例：</strong></span><br><strong><span style="color: #99cc00;"> 3</span></strong><br><strong><span style="color: #99cc00;"> 1 4 5</span></strong><br><span style="color: #ff9900;"><strong>分析：对原序列sort排序，逐个比较，当当前元素没有变化并且它左边的所有值的最大值都比它小的时候就可以认为它一定是主元（很容易证明正确性的）。</strong></span><br><span style="color: #ff9900;"><strong> 如果硬编码就直接运行超时了。。后来才想到这种方法。。</strong></span><br><span style="color: #ff9900;"><strong> 一开始有一个测试点段错误。。后来才想到因为输出时候v[0]是非法内存。。改正后格式错误。。（好像可以说明那个第2个测试点是0个主元？。。）然后——</strong></span><br><span style="color: #ff9900;"><strong> 加了最后一句printf(“\\n”);才正确。。（难道是当没有主元的时候必须要输出空行吗。。）</strong></span></p><p></p>