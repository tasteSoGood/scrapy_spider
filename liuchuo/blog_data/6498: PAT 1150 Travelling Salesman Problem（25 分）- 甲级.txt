<p><span style="color: #33cccc;"><strong>The “travelling salesman problem” asks the following question: “Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?” It is an NP-hard problem in combinatorial optimization, important in operations research and theoretical computer science. (Quoted from “https://en.wikipedia.org/wiki/Travelling_salesman_problem”.)</strong></span></p><p><span style="color: #33cccc;"><strong>In this problem, you are supposed to find, from a given list of cycles, the one that is the closest to the solution of a travelling salesman problem.</strong></span></p><p><span style="color: #33cccc;"><strong>Input Specification:</strong></span><br><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains 2 positive integers N (2&lt;N≤200), the number of cities, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format City1 City2 Dist, where the cities are numbered from 1 to N and the distance Dist is positive and is no more than 100. The next line gives a positive integer K which is the number of paths, followed by K lines of paths, each in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>n C1 C2 ……Cn​​</strong></span></p><p><span style="color: #33cccc;"><strong>where n is the number of cities in the list, and C</strong></span><span style="color: #33cccc;"><strong>​i</strong></span><span style="color: #33cccc;"><strong>‘s are the cities on a path.</strong></span></p><p><span style="color: #33cccc;"><strong>Output Specification:</strong></span><br><span style="color: #33cccc;"><strong>For each path, print in a line Path X: TotalDist (Description) where X is the index (starting from 1) of that path, TotalDist its total distance (if this distance does not exist, output NA instead), and Description is one of the following:</strong></span></p><p><span style="color: #33cccc;"><strong>TS simple cycle if it is a simple cycle that visits every city;</strong></span><br><span style="color: #33cccc;"><strong>TS cycle if it is a cycle that visits every city, but not a simple cycle;</strong></span><br><span style="color: #33cccc;"><strong>Not a TS cycle if it is NOT a cycle that visits every city.</strong></span><br><span style="color: #33cccc;"><strong>Finally print in a line Shortest Dist(X) = TotalDist where X is the index of the cycle that is the closest to the solution of a travelling salesman problem, and TotalDist is its total distance. It is guaranteed that such a solution is unique.</strong></span></p><p><span style="color: #33cccc;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>6 10</strong></span><br><span style="color: #33cccc;"><strong>6 2 1</strong></span><br><span style="color: #33cccc;"><strong>3 4 1</strong></span><br><span style="color: #33cccc;"><strong>1 5 1</strong></span><br><span style="color: #33cccc;"><strong>2 5 1</strong></span><br><span style="color: #33cccc;"><strong>3 1 8</strong></span><br><span style="color: #33cccc;"><strong>4 1 6</strong></span><br><span style="color: #33cccc;"><strong>1 6 1</strong></span><br><span style="color: #33cccc;"><strong>6 3 1</strong></span><br><span style="color: #33cccc;"><strong>1 2 1</strong></span><br><span style="color: #33cccc;"><strong>4 5 1</strong></span><br><span style="color: #33cccc;"><strong>7</strong></span><br><span style="color: #33cccc;"><strong>7 5 1 4 3 6 2 5</strong></span><br><span style="color: #33cccc;"><strong>7 6 1 3 4 5 2 6</strong></span><br><span style="color: #33cccc;"><strong>6 5 1 4 3 6 2</strong></span><br><span style="color: #33cccc;"><strong>9 6 2 1 6 3 4 5 2 6</strong></span><br><span style="color: #33cccc;"><strong>4 1 2 5 1</strong></span><br><span style="color: #33cccc;"><strong>7 6 1 2 5 4 3 1</strong></span><br><span style="color: #33cccc;"><strong>7 6 3 2 5 4 1 6</strong></span><br><span style="color: #33cccc;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>Path 1: 11 (TS simple cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 2: 13 (TS simple cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 3: 10 (Not a TS cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 4: 8 (TS cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 5: 3 (Not a TS cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 6: 13 (Not a TS cycle)</strong></span><br><span style="color: #33cccc;"><strong>Path 7: NA (Not a TS cycle)</strong></span><br><span style="color: #33cccc;"><strong>Shortest Dist(4) = 8</strong></span></p><p><strong><span style="color: #99cc00;">题目大意：给出一条路径，判断这条路径是这个图的旅行商环路、简单旅行商环路还是非旅行商环路～</span></strong></p><p><strong><span style="color: #ff9900;">分析：如果给出的路径存在某两个连续的点不可达或者第一个结点和最后一个结点不同或者这个路径没有访问过图中所有的点，那么它就不是一个旅行商环路(flag = 0)～如果满足了旅行商环路的条件，那么再判断这个旅行商环路是否是简单旅行商环路，即是否访问过n+1个结点（源点访问两次）～最后输出这些旅行商环路中经过的路径最短的路径编号和路径长度～</span></strong></p><p></p>