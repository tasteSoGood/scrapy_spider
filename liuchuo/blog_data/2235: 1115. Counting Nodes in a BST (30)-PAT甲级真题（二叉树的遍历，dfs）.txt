<p><span style="color: #33cccc;"><strong>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</strong></span></p><p><span style="color: #33cccc;"><strong>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</strong></span><br><span style="color: #33cccc;"><strong>The right subtree of a node contains only nodes with keys greater than the node’s key.</strong></span><br><span style="color: #33cccc;"><strong>Both the left and right subtrees must also be binary search trees.</strong></span><br><span style="color: #33cccc;"><strong>Insert a sequence of numbers into an initially empty binary search tree. Then you are supposed to count the total number of nodes in the lowest 2 levels of the resulting tree.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;=1000) which is the size of the input sequence. Then given in the next line are the N integers in [-1000 1000] which are supposed to be inserted into an initially empty binary search tree.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each case, print in one line the numbers of nodes in the lowest 2 levels of the resulting tree in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>n1 + n2 = n</strong></span></p><p><span style="color: #33cccc;"><strong>where n1 is the number of nodes in the lowest level, n2 is that of the level above, and n is the sum.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>9</strong></span><br><span style="color: #33cccc;"><strong>25 30 42 16 20 20 35 -5 28</strong></span><br><span style="color: #3366ff;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>2 + 4 = 6</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：输出一个二叉搜索树的最后两层结点个数a和b，以及他们的和c：“a + b = c”</strong></span><br><span style="color: #ff9900;"><strong>分析：用链表存储，递归构建二叉搜索树，深度优先搜索，传入的参数为结点和当前结点的深度depth，如果当前结点为NULL就更新<strong>最大深度</strong>maxdepth的值并return，将每一层所对应的结点个数存储在数组num中，输出数组的最后两个的值～～</strong></span></p><p> </p>