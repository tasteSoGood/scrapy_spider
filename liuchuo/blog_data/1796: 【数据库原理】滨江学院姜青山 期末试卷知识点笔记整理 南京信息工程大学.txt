<p><strong><span style="color: #ff6600;">从历年的考卷+姜青山划的重点上整理来的~</span></strong><br><strong><span style="color: #ff6600;">本宝宝刚考完~两个填空题没填出来不开心~其他题目还是比较基础的~大概90+的分数吧~<br>以下加粗有颜色的是本次期末考涉及的。。山哥出卷涉及面还是很广的~</span></strong></p><p>数据模型通常由 数据操作、数据结构、完整性约束 三要素组成<br>在关系中，每个属性的取值范围称为属性的域 SQL包括了数据定义、数据查询、数据操作和数据控制等功能<br>第一范式：每一个分量必须是不可分的数据项 要使关系模式属于<br><strong><span style="color: #ff6600;">第二范式，就要消除非主属性对码的部分依赖 </span></strong><br>第三范式，就是要消除非主属性对于码的传递依赖<br>SQL语言中，对用户授权使用GRANT语句，而取消所授权限使用REVOKE语句<br>数据库处理技术经历了人工管理、文件系统、数据库系统三个发展阶段<br>在文件管理阶段，文件之间是相互孤立的，在数据库管理阶段，文件之间是相互联系的<br>在实体中能作为码的属性称为主属性，否则称为非主属性<br>域是实体中相应属性的取值范围<br><strong><span style="color: #ff6600;">实体之间的联系类型有三种，分别为 一对一、一对多和多对多</span></strong><br>把保存关系定义的关系称为对应数据库的元关系，一个数据库的元关系由DBMS自动建立 在列级完整性约束中，每个约束只能涉及到1个属性，在表级完整性约束中，每个约束可以涉及到多个属性 主码</p><p>约束关键字：primary key；外码约束关键字：foreign key 单值约束关键字：unique；检查约束关键字：check<br>create 建立 alter 修改 drop 删除<br>根据基本表建立一个视图时，包括建立了该视图的结构和内容两个方面<br>层次模型是一棵树结构，关系模型是一个二维表格结构<br>数据库操作系统的功能有：数据定义、数据操纵、数据控制、数据库的建立和维护<br>数据模型分为层次模型、网状模型、关系模型和面向对象模型四类<br>关系的完整性分为 实体完整性、参照完整性 和 用户定义完整性<br>WHERE 子句作用于基本表或视图，从中选择满足条件的元组。HAVING 短语作用于组，从中选择满足条件的组。<br>聚集函数只能用于 SELECT 子句和 HAVING 短语之中，而绝对不能出现在 WHERE 子句中。<br>WHERE 子句用于对查询的表限定，而 HAVING 短语用于对结果集中的各分组进行限定。<br>数据库是长期存储在计算机内、有 组织 的、可 共享 的数据集合。<br>DBMS是指 数据库管理系统。它是位于 用户 和 操作系统 之间的一层管理软件<br>数据结构是对数据系统的静态特性的描述，数据操作是对数据库系统的动态特性的描述<br>数据冗余可能导致的问题有 ： 浪费存储空间及修改麻烦 、 潜在的数据不一致性<br>一个关系模式的定义格式为 ：关系名(属性名1，属性名2， ，属性名n)<br>一个关系模式的定义主要包括：关系名、属性名、属性类型、属性长度、关键字<br>关系代数运算中，传统的集合运算有 并、交、差、笛卡尔积<br>基本的运算是：并、交、差、笛卡尔积、投影、选择<br><strong><span style="color: #ff6600;">专门的关系运算有：选择、投影、连接</span></strong><br><strong><span style="color: #ff6600;"> 数据包括两个特征：静态特征、动态特征</span></strong><br>E-R图的中文名是 实体联系图<br>实体完整性是指：主属性不能取空值<br>参照完整性是指：外码可以是空值或者另一个关系主码的有效值<br><strong><span style="color: #ff6600;">对于非规范化的模式，经过 使属性域变为简单域 转变为1NF，将1NF经过 消除非主属性对码的部分依赖 转变为2NF，将2NF经过 消除非主属性对码的传递依赖 转变为3NF。</span></strong><br>数据库系统包括：数据库、DBMS、操作系统、开发工具、计算机、用户<br>数据库的二级映像：外模式/模式映像，模式/内模式映像</p><p><strong><span style="color: #ff6600;">简述数据库系统的三级模式的结构及其特点。</span></strong><br><strong><span style="color: #ff6600;"> 外模式是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</span></strong><br><strong><span style="color: #ff6600;"> 模式是数据库中全体数据的逻辑结构和特征，是所有用户的公共数据视图</span></strong><br><strong><span style="color: #ff6600;"> 内模式是数据的物理结构和存储方式，是数据在数据库内部的表示方式</span></strong><br><strong><span style="color: #ff6600;"> 外模式/模式映像保证了数据的逻辑独立性</span></strong><br><strong><span style="color: #ff6600;"> 模式/内模式映像保证了数据的物理独立性</span></strong><br><strong><span style="color: #ff6600;"> 优点：减少数据冗余，实现数据共享；提高存取效率，改善性能</span></strong></p><p>简述一个完整的数据库系统的组成<br>数据系统由数据库、数据库管理系统（及其开发软件）、系统平台、应用系统和人员构成。优点：数据集中、高共享、低冗余、独立性高、拥有对数据的管理和控制能力。</p><p><strong><span style="color: #ff6600;">数据的独立性包括哪两个方面？</span></strong><br><strong><span style="color: #ff6600;"> 物理独立性和逻辑独立性。物理独立性指用户的应用程序与存储在磁盘上的数据库是独立的。</span></strong><br><strong><span style="color: #ff6600;"> 逻辑独立性是指用户的应用程序和数据库的逻辑结构是相互独立的，数据库的逻辑结构变了，用户程序也可以不变</span></strong></p><p>完整性约束包括哪些内容？<br>包括<strong><span style="color: #ff6600;">实体完整性、参照完整性、用户定义完整性</span></strong>。实体完整性和参照完整性是关系模型必须满足的完整性约束条件。</p><p><strong><span style="color: #ff6600;">存取控制的方法：自主存取控制（DAC） 强制存储控制（MAC）</span></strong><br><strong><span style="color: #ff6600;"> 数据库的系统组成：数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员</span></strong><br><strong><span style="color: #ff6600;"> 数据库设计的基本步骤：需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库实施和维护</span></strong><br><strong><span style="color: #ff6600;"> 游标的定义：</span></strong><br><strong><span style="color: #ff6600;"> 游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果，每个游标区都有一个名字，用户可以通过游标逐一获取记录，并赋予主变量，交由主语言进一步处理。</span></strong><br><strong><span style="color: #ff6600;"> 关系数据库的优化方法：代数优化、物理优化</span></strong><br><strong><span style="color: #ff6600;"> 事务：所谓事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位。</span></strong><br><strong><span style="color: #ff6600;"> 故障种类：事务故障，系统故障，介质故障，计算机病毒</span></strong><br><strong><span style="color: #ff6600;"> 并发控制：用正确的方式调度并发操作，使一个用户事务的执行结果不受其他事务的干扰，从而避免造成数据的不一致性。</span></strong><br><strong><span style="color: #ff6600;"> 可串行调度：多个事务的并发执行结果与按某一</span><span style="color: #ff6600;">次序串行地执行这些事务时的结果相同，称这种调度策略为可串行化的调度。</span></strong><br><strong><span style="color: #ff6600;"> 可串行性是并发事务正确调度的准则。</span></strong><br><strong><span style="color: #ff6600;">函数依赖：设X,Y是关系R的两个属性集合，当任何时刻R中的任意两个元组中的X属性值相同时，则它们的Y属性值也相同，则称X函数决定Y，或Y函数依赖于X</span></strong></p><p>数据库恢复是将数据库从错误状态恢复到某一已知的正确状态的功能<br>事务的一致性是指：事务必须使数据库从一个一致性状态变到另一个一致性状态。<br>从关系规范化理论的角度讲，一个只满足1NF的关系可能存在的四个问题是：数据冗余大、修改异常、插入异常、删除异常</p><p>如果数据库系统对事务的并发操作不加以控制，则有可能带来哪些问题？如何解决？<br>如果数据库系统对事务的并发操作不加以控制，则有可能带来三类问题：⑴丢失更新问题；⑵数据不一致；⑶读“脏数据”。<br>解决的办法：采用“封锁”技术。</p><p>数据字典的内容和作用是什么?<br>数据字典的内容一般包括：数据项、数据结构、数据流、数据存储和加工过程。其作用是对系统中数据做出详尽的描述，提供对数据库数据的集中管理。</p><p>什么是ER图?构成ER图的基本要素是什么?<br>ER图是用来描述某一组织(单位)的概念模型，提供了表示实体、属性和联系的方法。构成ER图的基本要素是实体、属性和关系</p><p class="p1"><strong><span style="color: #ff6600;">数据模型：层次模型，网状模型，关系模型。</span></strong><br><strong><span style="color: #ff6600;">数据库系统的三级模式结果：外模式，模式和内模式。</span></strong><br><strong><span style="color: #ff6600;">数据库的二级映像功能：<span class="s1">1</span>，外模式<span class="s1">/</span>模式映像。<span class="s1">2</span>，模式<span class="s1">/</span>内模式映像。</span></strong><br><strong><span style="color: #ff6600;">二级映像使得数据库系统中的数据能够具有较高的逻辑独立性和无理独立性。</span></strong><br><strong><span style="color: #ff6600;">数据独立性：（数据的物理独立性，数据的逻辑独立性）数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出来。</span></strong><br>数据库的系统组成：数据库系统一般由数据库，数据库管理系统（及开发工具），应用系统，数据库管理员构成。<br><strong><span style="color: #ff6600;">存取控制的方法：<span class="s1">1</span>，自主存取控制（<span class="s1">DAC</span>）<span class="s1">2</span>，强制存取控制（<span class="s1">MAC</span>）。</span></strong><br><strong><span style="color: #ff6600;">数据库设计的基本步骤：</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">1</span>，需求分析。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">2</span>，概念结果设计。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">3</span>，逻辑结构设计。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">4</span>，物理结构设计。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">5</span>，数据库实施。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">6</span>，数据库运行和维护。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">游标：游标是系统为用户开设的一个数据缓冲区，存放<span class="s1">SQL</span>语句的执行结果，每个游标区都有一个名字，用户可以通过游标逐一获取记录，并赋予主变量，交由主语言进一步处理。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">关系数据库的优化方法：</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">1</span>，代数优化：通过对关系代数表达式的等价变换来提高查询效率。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">2</span>，物理优化：选择高效合理的操作算法或存取路径，求得优化的查询计划，达到查询优化的目标。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">事务：所谓事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位。</span></strong></p><p class="p1">故障种类：事务内部的故障，系统故障，介质故障，计算机病毒。恢复策略：<br><span class="s1">1</span>，事务故障的恢复<br><span class="s1"><span class="Apple-converted-space">   </span>*1</span>。反向扫描日志文件。<br><span class="s1"><span class="Apple-converted-space">   </span>*2</span>。对改事务的更新操作执行逆操作。<br><span class="s1"><span class="Apple-converted-space">   </span>*3</span>。继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。<br><span class="s1"><span class="Apple-converted-space">   </span>*4</span>。如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。<br><strong><span style="color: #ff6600;"><span class="s1">2</span>，系统故障恢复（是由系统在重新启动时自动完成的，不需要用户干预）</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">*1</span>。正向扫描日志文件，找出在故障发生前已经提交的事务，将其事务标识记入重做队列。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">*2</span>。对撤销队列中的各个事务进行撤销理。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">*3.</span>。对重做队列中的各个事务进行重做处理。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">3</span>，介质故障的恢复（重做数据库）</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">*1</span>。装入最新的数据库后备副本，使数据库恢复到最近一次转储时的一致性状态。</span></strong><br><strong><span style="color: #ff6600;"><span class="s1">*2</span>。装入相应的日志文件副本，重做已完成的事务。</span></strong></p><p class="p1">介质故障的恢复需要<span class="s1">DBA</span>介入，但<span class="s1">DBA</span>只需要重装最近转储的数据库副本和有关的各日志文件副本，然后执行系统提供的恢复命令即可，具体的恢复操作仍由<span class="s1">DBMS</span>完成。</p><p class="p1"><strong><span style="color: #ff6600;">并发控制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其他事务的干扰，从而避免造成数据的不一致性。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">可串行调度：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行地执行这些事务时的结果相同，称这种调度策略为可串行化的调度。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">可串行性是并发事务正确调度的准则。</span></strong></p><p class="p1"><strong><span style="color: #ff6600;">函数依赖：设<span class="s1">X,Y</span>是关系<span class="s1">R</span>的两个属性集合，当任何时刻<span class="s1">R</span>中的任意两个元组中的<span class="s1">X</span>属性值相同时，则它们的<span class="s1">Y</span>属性值也相同，则称<span class="s1">X</span>函数决定<span class="s1">Y</span>，或<span class="s1">Y</span>函数依赖于<span class="s1">X</span></span></strong></p>