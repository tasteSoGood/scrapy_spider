<p><span style="color: #33cccc;"><strong>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=10000) which is the number of nodes, and hence the nodes are numbered from 1 to N. Then N-1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print “Error: K components” where K is the number of connected components in the graph.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>5</strong></span><br><span style="color: #33cccc;"><strong>1 2</strong></span><br><span style="color: #33cccc;"><strong>1 3</strong></span><br><span style="color: #33cccc;"><strong>1 4</strong></span><br><span style="color: #33cccc;"><strong>2 5</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>3</strong></span><br><span style="color: #33cccc;"><strong>4</strong></span><br><span style="color: #33cccc;"><strong>5</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>5</strong></span><br><span style="color: #33cccc;"><strong>1 3</strong></span><br><span style="color: #33cccc;"><strong>1 4</strong></span><br><span style="color: #33cccc;"><strong>2 5</strong></span><br><span style="color: #33cccc;"><strong>3 4</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>Error: 2 components</strong></span><br><span style="color: #99cc00;"><strong>题目大意：给出n个结点（1~n）之间的n条边，问是否能构成一棵树，如果不能构成则输出它有的连通分量个数，如果能构成一棵树，输出能构成最深的树的高度时，树的根结点。如果有多个，按照从小到大输出。</strong></span><br><span style="color: #ff9900;"><strong>分析：首先深度优先搜索判断它有几个连通分量。如果有多个，那就输出Error: x components，如果只有一个，就两次深度优先搜索，先从一个结点dfs后保留最高高度拥有的结点们，然后从这些结点中的其中任意一个开始dfs得到最高高度的结点们，这两个结点集合的并集就是所求</strong></span></p><p> </p>