<p><span style="color: #33cccc;"><strong>Input our current position and a destination, an online map can recommend several paths. Now your job is to recommend two paths to your user: one is the shortest, and the other is the fastest. It is guaranteed that a path exists for any request.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line gives two positive integers N (2 &lt;= N &lt;= 500), and M, being the total number of streets intersections on a map, and the number of streets, respectively. Then M lines follow, each describes a street in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>V1 V2 one-way length time</strong></span></p><p><span style="color: #33cccc;"><strong>where V1 and V2 are the indices (from 0 to N-1) of the two ends of the street; one-way is 1 if the street is one-way from V1 to V2, or 0 if not; length is the length of the street; and time is the time taken to pass the street.</strong></span></p><p><span style="color: #33cccc;"><strong>Finally a pair of source and destination is given.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each case, first print the shortest path from the source to the destination with distance D in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>Distance = D: source -&gt; v1 -&gt; … -&gt; destination</strong></span></p><p><span style="color: #33cccc;"><strong>Then in the next line print the fastest path with total time T:</strong></span></p><p><span style="color: #33cccc;"><strong>Time = T: source -&gt; w1 -&gt; … -&gt; destination</strong></span></p><p><span style="color: #33cccc;"><strong>In case the shortest path is not unique, output the fastest one among the shortest paths, which is guaranteed to be unique. In case the fastest path is not unique, output the one that passes through the fewest intersections, which is guaranteed to be unique.</strong></span></p><p><span style="color: #33cccc;"><strong>In case the shortest and the fastest paths are identical, print them in one line in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>Distance = D; Time = T: source -&gt; u1 -&gt; … -&gt; destination</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>10 15</strong></span><br><span style="color: #33cccc;"><strong>0 1 0 1 1</strong></span><br><span style="color: #33cccc;"><strong>8 0 0 1 1</strong></span><br><span style="color: #33cccc;"><strong>4 8 1 1 1</strong></span><br><span style="color: #33cccc;"><strong>3 4 0 3 2</strong></span><br><span style="color: #33cccc;"><strong>3 9 1 4 1</strong></span><br><span style="color: #33cccc;"><strong>0 6 0 1 1</strong></span><br><span style="color: #33cccc;"><strong>7 5 1 2 1</strong></span><br><span style="color: #33cccc;"><strong>8 5 1 2 1</strong></span><br><span style="color: #33cccc;"><strong>2 3 0 2 2</strong></span><br><span style="color: #33cccc;"><strong>2 1 1 1 1</strong></span><br><span style="color: #33cccc;"><strong>1 3 0 3 1</strong></span><br><span style="color: #33cccc;"><strong>1 4 0 1 1</strong></span><br><span style="color: #33cccc;"><strong>9 7 1 3 1</strong></span><br><span style="color: #33cccc;"><strong>5 1 0 5 2</strong></span><br><span style="color: #33cccc;"><strong>6 5 1 1 2</strong></span><br><span style="color: #33cccc;"><strong>3 5</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>Distance = 6: 3 -&gt; 4 -&gt; 8 -&gt; 5</strong></span><br><span style="color: #33cccc;"><strong>Time = 3: 3 -&gt; 1 -&gt; 5</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>7 9</strong></span><br><span style="color: #33cccc;"><strong>0 4 1 1 1</strong></span><br><span style="color: #33cccc;"><strong>1 6 1 1 3</strong></span><br><span style="color: #33cccc;"><strong>2 6 1 1 1</strong></span><br><span style="color: #33cccc;"><strong>2 5 1 2 2</strong></span><br><span style="color: #33cccc;"><strong>3 0 0 1 1</strong></span><br><span style="color: #33cccc;"><strong>3 1 1 1 3</strong></span><br><span style="color: #33cccc;"><strong>3 2 1 1 2</strong></span><br><span style="color: #33cccc;"><strong>4 5 0 2 2</strong></span><br><span style="color: #33cccc;"><strong>6 5 1 1 2</strong></span><br><span style="color: #33cccc;"><strong>3 5</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>Distance = 3; Time = 4: 3 -&gt; 2 -&gt; 5</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：给一张地图，两个结点中既有距离也有时间，有的单行有的双向，要求根据地图推荐两条路线：一条是最快到达路线，一条是最短距离的路线。</strong></span><br><span style="color: #99cc00;"><strong>第一行给出两个整数N和M，表示地图中地点的个数和路径的条数。接下来的M行每一行给出：道路结点编号V1 道路结点编号V2 是否单行线 道路长度 所需时间</strong></span><br><span style="color: #99cc00;"><strong>要求第一行输出最快到达时间Time和路径，第二行输出最短距离Distance和路径</strong></span></p><p><span style="color: #ff9900;"><strong>分析：</strong></span><br><span style="color: #ff9900;"><strong>1.用两个Dijkstra。一个求最短路径（如果相同求时间最短的那条），一个求最快路径（如果相同求结点数最小的那条）～～</strong></span><br><span style="color: #ff9900;"><strong>2.求最短路径,和最快路径都可以在Dijkstra里面求前驱结点dispre和，Timepre数组～</strong></span><br><span style="color: #ff9900;"><strong>3.dispre数组更新的条件是路径更短，或者路径相等的同时时间更短。</strong></span><br><span style="color: #ff9900;"><strong>4.求最快路径时候要多维护一个NodeNum数组，记录在时间最短的情况下，到达此节点所需的节点数量。</strong></span><br><span style="color: #ff9900;"><strong>Time数组更新的条件是，时间更短，时间相同的时候，如果此节点能让到达次节点是数目也变小，则更新Timepre，heNodeNum数组</strong></span><br><span style="color: #ff9900;"><strong>5.最后根据dispre 和Timepre数组递归出两条路径，比较判断，输出最终答案～</strong></span><br><span style="color: #ff99cc;"><strong>注意：如果直接使用DFS的话，会导致最后一个测试用例“运行超时”～～</strong></span></p><p></p>