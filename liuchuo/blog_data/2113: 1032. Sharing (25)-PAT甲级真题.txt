<p><span style="color: #33cccc;"><strong>To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share the same sublist if they share the same suffix. For example, “loading” and “being” are stored as showed in Figure 1.</strong></span></p><p><img class="alignnone size-full wp-image-2114" src="http://www.liuchuo.net/wp-content/uploads/2016/08/Snip20160807_66.png" alt="Snip20160807_66" width="1066" height="228" srcset="https://cdn1.liuchuo.net/wp-content/uploads/2016/08/Snip20160807_66.png 1066w, https://cdn1.liuchuo.net/wp-content/uploads/2016/08/Snip20160807_66-300x64.png 300w, https://cdn1.liuchuo.net/wp-content/uploads/2016/08/Snip20160807_66-768x164.png 768w, https://cdn1.liuchuo.net/wp-content/uploads/2016/08/Snip20160807_66-1024x219.png 1024w" sizes="(max-width: 1066px) 100vw, 1066px"><br><span style="color: #33cccc;"><strong>Figure 1</strong></span><br><span style="color: #33cccc;"><strong>You are supposed to find the starting position of the common suffix (e.g. the position of “i” in Figure 1).</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains two addresses of nodes and a positive N (&lt;= 105), where the two addresses are the addresses of the first nodes of the two words, and N is the total number of nodes. The address of a node is a 5-digit positive integer, and NULL is represented by -1.</strong></span></p><p><span style="color: #33cccc;"><strong>Then N lines follow, each describes a node in the format:</strong></span></p><p><span style="color: #33cccc;"><strong>Address Data Next</strong></span></p><p><span style="color: #33cccc;"><strong>where Address is the position of the node, Data is the letter contained by this node which is an English letter chosen from {a-z, A-Z}, and Next is the position of the next node.</strong></span></p><p><span style="color: #33cccc;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each case, simply output the 5-digit starting position of the common suffix. If the two words have no common suffix, output “-1” instead.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input 1:</strong></span><br><span style="color: #33cccc;"><strong>11111 22222 9</strong></span><br><span style="color: #33cccc;"><strong>67890 i 00002</strong></span><br><span style="color: #33cccc;"><strong>00010 a 12345</strong></span><br><span style="color: #33cccc;"><strong>00003 g -1</strong></span><br><span style="color: #33cccc;"><strong>12345 D 67890</strong></span><br><span style="color: #33cccc;"><strong>00002 n 00003</strong></span><br><span style="color: #33cccc;"><strong>22222 B 23456</strong></span><br><span style="color: #33cccc;"><strong>11111 L 00001</strong></span><br><span style="color: #33cccc;"><strong>23456 e 67890</strong></span><br><span style="color: #33cccc;"><strong>00001 o 00010</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 1:</strong></span><br><span style="color: #33cccc;"><strong>67890</strong></span><br><span style="color: #3366ff;"><strong>Sample Input 2:</strong></span><br><span style="color: #33cccc;"><strong>00001 00002 4</strong></span><br><span style="color: #33cccc;"><strong>00001 a 10001</strong></span><br><span style="color: #33cccc;"><strong>10001 s -1</strong></span><br><span style="color: #33cccc;"><strong>00002 a 10002</strong></span><br><span style="color: #33cccc;"><strong>10002 t -1</strong></span><br><span style="color: #3366ff;"><strong>Sample Output 2:</strong></span><br><span style="color: #33cccc;"><strong>-1</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：求两个链表的首个共同结点的地址。如果没有，就输出-1</strong></span><br><span style="color: #ff9900;"><strong>分析：用结构体数组存储，node[i]表示地址为i的结点，key表示值，next为下一个结点的地址，flag表示第一条链表有没有该结点</strong></span><br><span style="color: #ff9900;"><strong>遍历第一条链表，将访问过的结点的flag都标记为true，当遍历第二条结点的时候，如果遇到了true的结点就输出并结束程序，没有遇到就输出-1</strong></span></p><p> </p>