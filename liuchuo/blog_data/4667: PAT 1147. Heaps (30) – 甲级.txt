<p><span style="color: #33cccc;"><strong>In computer science, a heap is a specialized tree-based data structure that satisfies the heap property: if P is a parent node of C, then the key (the value) of P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of C. A common implementation of a heap is the binary heap, in which the tree is a complete binary tree. (Quoted from Wikipedia at https://en.wikipedia.org/wiki/Heap_(data_structure))</strong></span><br><span style="color: #33cccc;"><strong>Your job is to tell if a given complete binary tree is a heap.</strong></span><br><span style="color: #33cccc;"><strong>Input Specification:</strong></span><br><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line gives two positive integers: M (&lt;= 100), the number of trees to be tested; and N (1 &lt; N &lt;= 1000), the number of keys in each tree, respectively. Then M lines follow, each contains N distinct integer keys (all in the range of int), which gives the level order traversal sequence of a complete binary tree.</strong></span><br><span style="color: #33cccc;"><strong>Output Specification:</strong></span><br><span style="color: #33cccc;"><strong>For each given tree, print in a line “Max Heap” if it is a max heap, or “Min Heap” for a min heap, or “Not Heap” if it is not a heap at all. Then in the next line print the trees postorder traversal sequence. All the numbers are separated by a space, and there must no extra space at the beginning or the end of the line.</strong></span></p><p><span style="color: #33cccc;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>3 8</strong></span><br><span style="color: #33cccc;"><strong>98 72 86 60 65 12 23 50</strong></span><br><span style="color: #33cccc;"><strong>8 38 25 58 52 82 70 60</strong></span><br><span style="color: #33cccc;"><strong>10 28 15 12 34 9 8 56</strong></span><br><span style="color: #33cccc;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>Max Heap</strong></span><br><span style="color: #33cccc;"><strong>50 60 65 72 12 23 86 98</strong></span><br><span style="color: #33cccc;"><strong>Min Heap</strong></span><br><span style="color: #33cccc;"><strong>60 58 52 38 82 70 25 8</strong></span><br><span style="color: #33cccc;"><strong>Not Heap</strong></span><br><span style="color: #33cccc;"><strong>56 12 34 28 9 8 15 10</strong></span></p><p><span style="color: #99cc00;"><strong>题目大意：给一个树的层序遍历，判断它是不是堆，是大顶堆还是小顶堆。输出这个树的后序遍历～</strong></span><br><span style="color: #ff99cc;"><strong>分析：30分大题，28行代码，一行代码一分……（(⊙o⊙)嗯） // 我为什么这么机智可爱又伶俐？</strong></span><br><span style="color: #ff9900;"><strong>首先根据v[0]和v[1]的大小比较判断可能是大顶还是小顶，分别赋值flag为1和-1，先根据层序遍历，从0～(n-1)/2【所有有孩子的结点】判断他们的孩子是不是满足flag的要求，如果有一个结点不满足，那就将flag=0表示这不是一个堆。根据flag输出是否是堆，大顶堆还是小顶堆，然后后序遍历，根据index分别遍历index*2+1和index*2+2，即他们的左右孩子，遍历完左右子树后输出根结点，即完成了后序遍历～</strong></span></p><p> </p>