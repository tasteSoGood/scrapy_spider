<p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p><p>The update(i, val) function modifies nums by updating the element at index i to val.<br>Example:<br>Given nums = [1, 3, 5]</p><p>sumRange(0, 2) -&gt; 9<br>update(1, 2)<br>sumRange(0, 2) -&gt; 8<br>Note:<br>The array is only modifiable by the update function.<br>You may assume the number of calls to update and sumRange function is distributed evenly.</p><p><span style="color: #99cc00;"><strong>题目大意：给一个整型数组，当调用sumRange(i, j)的时候返回i～j之间的元素的总和，当调用update(i, val)的时候将nums[i]的值更新为val</strong></span></p><p><span style="color: #ff9900;"><strong>分析：本来想用sum[]数组标记和，然后更新sum[]直接返回的，结果还是意料之中的超时了。。用树状数组的方法可以解决～</strong></span></p><p><span style="color: #ffcc00;"><strong>解释：树状数组本质上是按照二分对数组进行分组，维护和查询都是O(lgn)的复杂度</strong></span><br><span style="color: #ffcc00;"><strong>树状数组与线段树：树状数组和线段树很像，但能用树状数组解决的问题，基本上都能用线段树解决，而线段树能解决的树状数组不一定能解决。相比较而言，树状数组效率要高很多～</strong></span><span style="color: #ffcc00;"><strong>关于lowbit：</strong></span><span style="color: #ffcc00;"><strong>lowbit = x &amp; (-x), lowbit(x)也可以理解为能整除x的最大的2的幂次，</strong></span><span style="color: #ffcc00;"><strong>如果要求[x, y]之内的数的和，可以转换成getsum(y) – getsum(x – 1)来解决～</strong></span></p><p></p>