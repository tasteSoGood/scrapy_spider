<p><strong><span style="color: #3366ff;">异步性</span>是指进程以不可预知的速度向前推进。内存中的每个进程何时执行,何时暂停,以怎样的速度向前推进,每道程序总共需要多少时间才能完成等,都是不可预知的。</strong><br><strong>是程序并发执行时，程序之间的相互制约关系导致了并发程序这种“执行——暂停——执行”这种间断性的活动规律。</strong></p><p><span style="color: #ff9900;"><strong>比如，当正在执行的进程提出某种资源请求时，如打印请求，而此时打印机正在为其他某进程打印，由于打印机属于临界资源，因此正在执行的进程必须等待，且放弃处理机，直到打印机空闲，并再次把处理机分配给该进程时，该进程方能继续执行。可见，由于资源等因素的限制，进程的执行通常都不是“一气呵成”，而是以“停停走走”的方式运行。 </strong></span></p><p><strong><span style="color: #3366ff;">异步性</span>就是描述进程这种以不可预知的速度走走停停、何时开始何时暂停何时结束不可预知的性质。</strong></p><p><span style="color: #ff9900;"><strong>也就是说，如果传统意义上的程序没有在操作系统中为之配备进程控制块（PCB），没有用它来描述进程基本情况和活动过程，进而控制和管理进程，这样就会使程序在并发执行的时候失去其封闭性，也失去了可再现性。</strong></span><br><span style="color: #ff9900;"><strong>但是，如果操作系统采用了进程同步机制，虽然程序具有异步性（走走停停、以不可预知的速度前进），但仍能保证进程并发执行的结果是可再现的。</strong></span></p><p><strong><span style="color: #99cc00;">所以，只要在操作系统中配置有完善的进程同步机制，且运行环境相同，作业经多次运行都会获得完全相同的结果。</span><span style="color: #3366ff;">因此，异步运行方式是允许的。</span></strong></p>