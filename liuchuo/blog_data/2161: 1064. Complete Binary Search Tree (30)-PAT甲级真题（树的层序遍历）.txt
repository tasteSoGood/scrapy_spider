<p><span style="color: #33cccc;"><strong>A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:</strong></span></p><p><span style="color: #33cccc;"><strong>The left subtree of a node contains only nodes with keys less than the node’s key.</strong></span><br><span style="color: #33cccc;"><strong>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</strong></span><br><span style="color: #33cccc;"><strong>Both the left and right subtrees must also be binary search trees.</strong></span><br><span style="color: #33cccc;"><strong>A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.</strong></span></p><p><span style="color: #33cccc;"><strong>Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.</strong></span></p><p><span style="color: #3366ff;"><strong>Input Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.</strong></span></p><p><span style="color: #3366ff;"><strong>Output Specification:</strong></span></p><p><span style="color: #33cccc;"><strong>For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.</strong></span></p><p><span style="color: #3366ff;"><strong>Sample Input:</strong></span><br><span style="color: #33cccc;"><strong>10</strong></span><br><span style="color: #33cccc;"><strong>1 2 3 4 5 6 7 8 9 0</strong></span><br><span style="color: #3366ff;"><strong>Sample Output:</strong></span><br><span style="color: #33cccc;"><strong>6 3 8 1 5 7 9 0 2 4</strong></span><br><span style="color: #99cc00;"><strong>题目大意：给一串构成树的序列，已知该树是完全二叉搜索树，求它的层序遍历的序列</strong></span><br><span style="color: #ff9900;"><strong>分析：总得概括来说，已知中序，可求root下标，可以求出层序。</strong></span><br><span style="color: #ff9900;"><strong>1. 因为二叉搜索树的中序满足：是一组序列的从小到大排列，所以只需排序所给序列即可得到中序</strong></span><br><span style="color: #ff9900;"><strong>2. 因为根据完全二叉树的结点数，可以求出它的根结点在中序中对应的下标</strong></span><br><span style="color: #ff9900;"><strong>3. 如此，已知了中序，又可以根据结点数求出根结点的下标，就可以递归求出左右子树的根结点的下标</strong></span><br><span style="color: #ff9900;"><strong>4. i结点的左孩子为2 * i + 1，右孩子2 * i + 2，就可以根据结点下标和中序数组赋值level数组</strong></span><br><span style="color: #ff9900;"><strong>5. 最后输出所有结点的层序数组level</strong></span></p><p> </p>