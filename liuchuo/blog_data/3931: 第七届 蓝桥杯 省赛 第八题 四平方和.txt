<p><span style="color: #33cccc;"><strong>四平方和定理，又称为拉格朗日定理： </strong></span><br><span style="color: #33cccc;"><strong>每个正整数都可以表示为至多4个正整数的平方和。 </strong></span><br><span style="color: #33cccc;"><strong>如果把0包括进去，就正好可以表示为4个数的平方和。</strong></span></p><p><span style="color: #33cccc;"><strong>比如： </strong></span><br><span style="color: #33cccc;"><strong>5 = 0^2 + 0^2 + 1^2 + 2^2 </strong></span><br><span style="color: #33cccc;"><strong>7 = 1^2 + 1^2 + 1^2 + 2^2 </strong></span><br><span style="color: #33cccc;"><strong>（^符号表示乘方的意思）</strong></span></p><p><span style="color: #33cccc;"><strong>对于一个给定的正整数，可能存在多种平方和的表示法。 </strong></span><br><span style="color: #33cccc;"><strong>要求你对4个数排序： </strong></span><br><span style="color: #33cccc;"><strong>0 &lt;= a &lt;= b &lt;= c &lt;= d </strong></span><br><span style="color: #33cccc;"><strong>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</strong></span></p><p><span style="color: #33cccc;"><strong>程序输入为一个正整数N (N&lt;5000000) </strong></span><br><span style="color: #33cccc;"><strong>要求输出4个非负整数，按从小到大排序，中间用空格分开</strong></span></p><p><span style="color: #33cccc;"><strong>例如，输入： </strong></span><br><span style="color: #33cccc;"><strong>5 </strong></span><br><span style="color: #33cccc;"><strong>则程序应该输出： </strong></span><br><span style="color: #33cccc;"><strong>0 0 1 2</strong></span></p><p><span style="color: #33cccc;"><strong>再例如，输入： </strong></span><br><span style="color: #33cccc;"><strong>12 </strong></span><br><span style="color: #33cccc;"><strong>则程序应该输出： </strong></span><br><span style="color: #33cccc;"><strong>0 2 2 2</strong></span></p><p><span style="color: #33cccc;"><strong>再例如，输入： </strong></span><br><span style="color: #33cccc;"><strong>773535 </strong></span><br><span style="color: #33cccc;"><strong>则程序应该输出： </strong></span><br><span style="color: #33cccc;"><strong>1 1 267 838</strong></span></p><p><span style="color: #33cccc;"><strong>资源约定： </strong></span><br><span style="color: #33cccc;"><strong>峰值内存消耗 &lt; 256M </strong></span><br><span style="color: #33cccc;"><strong>CPU消耗 &lt; 3000ms</strong></span></p><p><span style="color: #ff9900;"><strong>分析：直接四层循环可能会超时，可以考虑先将两个数能构成的平方和保存在map里面，如果在前两层循环的时候，发现剩下的数并不能由两个数的平方构成，就直接continue跳过～否则就判断第三层循环，然后用sqrt(num – a * a – b * b – c * c)算出最后一个数temp，看它是否为整数～如果是整数就输出～并且退出程序～</strong></span></p><p> </p><p> </p>